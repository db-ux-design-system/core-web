---
name: "Auto commit and merge changes"
description: "Creates a new branch and commits current changes and merges it afterwards to retrigger pipeline"
inputs:
  branch-name:
    description: "The new branch name to commit to"
    required: true
  commit-message:
    description: "The message you want to commit"
    required: true
  commit-files:
    description: "The files which should be commited with `git add xxx`"
    required: true

runs:
  using: "composite"
  steps:
    # https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/making-authenticated-api-requests-with-a-github-app-in-a-github-actions-workflow
    - name: üß¨ Generate a token
      id: generate-token
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ vars.AUTO_MERGE_APP_ID }}
        private-key: ${{ secrets.AUTO_MERGE_PRIVATE_KEY }}

    - name: üèóÔ∏è Create new branch and commit changes
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NEW_PR_BRANCH: ${{ inputs.branch-name }}
        COMMIT_MESSAGE: ${{ inputs.commit-message }}
        COMMIT_FILES: ${{ inputs.commit-files }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        git checkout -b "$NEW_PR_BRANCH"
        git add $COMMIT_FILES

        # We can't use semantic commits here because of the if statement in the workflow
        git commit --no-verify -m "$COMMIT_MESSAGE"
        git push -f origin "$NEW_PR_BRANCH"

    - name: ü™ó Create Pull Request
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COMMIT_MESSAGE: ${{ inputs.commit-message }}
        NEW_PR_BRANCH: ${{ inputs.branch-name }}
      run: |
        BASE_BRANCH="${{ github.head_ref }}"
        gh pr create --base "$BASE_BRANCH" --head "$NEW_PR_BRANCH" --title "Automated PR: $COMMIT_MESSAGE" --body "This PR was created automatically by a GitHub Action."

    - name: ü§ñ Squash the PR
      shell: bash
      run: gh pr merge --squash "$NEW_PR_BRANCH"
      env:
        GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        NEW_PR_BRANCH: ${{ inputs.branch-name }}
