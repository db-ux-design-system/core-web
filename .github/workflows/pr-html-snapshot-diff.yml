name: 🧪 PR HTML Snapshot Diff

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: pr-html-snap-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  html-snapshot-diff:
    name: 🔎 HTML snapshot changes & bump guard
    runs-on: ubuntu-22.04

    steps:
      - name: ⏬ Checkout PR head (not merge ref)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 🔁 Ensure base (origin/main) is present
        shell: bash
        run: |
          set -euo pipefail
          if [ -f .git/shallow ]; then
            git fetch --unshallow --no-tags --prune
          fi
          git fetch --no-tags --prune origin +refs/heads/main:refs/remotes/origin/main
          git rev-parse remotes/origin/main >/dev/null

      - name: 🧾 Collect changed HTML snapshots
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          git diff --unified=3 --no-color origin/main...HEAD -- "__snapshots__/**/*.html" > html-snapshots.diff || true
          git diff --name-status origin/main...HEAD -- "__snapshots__/**/*.html" > html-snapshots.list || true
          TOTAL=$(wc -l < html-snapshots.list 2>/dev/null | tr -d '[:space:]' || echo 0)
          ADDED=$(grep -E '^[A]\s' html-snapshots.list 2>/dev/null | wc -l | tr -d '[:space:]' || echo 0)
          MOD=$(grep -E '^[M]\s' html-snapshots.list 2>/dev/null | wc -l | tr -d '[:space:]' || echo 0)
          DEL=$(grep -E '^[D]\s' html-snapshots.list 2>/dev/null | wc -l | tr -d '[:space:]' || echo 0)
          REN=$(grep -E '^[R]\d*\s' html-snapshots.list 2>/dev/null | wc -l | tr -d '[:space:]' || echo 0)

          head -n 200 html-snapshots.list > html-snapshots.short || true
          {
            echo "### HTML Snapshot Changes"
            echo
            if [ "${TOTAL}" = "0" ]; then
              echo "_No \`__snapshots__/**/*.html\` changes detected._"
            else
              echo "- Total: **${TOTAL}** (added: ${ADDED}, modified: ${MOD}, deleted: ${DEL}, renamed: ${REN})"
              echo
              echo "| Status | File |"
              echo "|-------:|:-----|"
              while read -r LINE; do
                [ -z "${LINE:-}" ] && continue
                STATUS=$(echo "$LINE" | awk '{print $1}')
                FILE=$(echo "$LINE" | awk '{print $2}')
                if echo "$STATUS" | grep -qE '^R'; then
                  FILE=$(echo "$LINE" | awk '{print $3}')
                fi
                echo "| \`$STATUS\` | \`$FILE\` |"
              done < html-snapshots.short
              if [ "$TOTAL" -gt 200 ]; then
                echo ""
                echo "_…and $(($TOTAL - 200)) more_"
              fi
            fi
            echo ""
            echo "<!-- html-snapshot-summary-marker -->"
          } > snapshot-summary.md

          {
            echo "SNAP_TOTAL=${TOTAL}"
            echo "SNAP_ADDED=${ADDED}"
            echo "SNAP_MODIFIED=${MOD}"
            echo "SNAP_DELETED=${DEL}"
            echo "SNAP_RENAMED=${REN}"
            echo "SUMMARY_MD_PATH=$(pwd)/snapshot-summary.md"
          } >> "$GITHUB_ENV"

      - name: 📎 Upload unified diff (artifact)
        if: env.SNAP_TOTAL != '0'
        uses: actions/upload-artifact@v4
        with:
          name: html-snapshots-diff
          path: html-snapshots.diff
          if-no-files-found: ignore
          retention-days: 7

      - name: 💬 Upsert PR comment
        uses: actions/github-script@v7
        env:
          SUMMARY_MD_PATH: ${{ env.SUMMARY_MD_PATH }}
        with:
          script: |
            const fs = require('fs');
            const { owner, repo, number } = context.issue;
            const marker = '<!-- html-snapshot-summary-marker -->';
            let body = '_No snapshot info._';
            try {
              const p = process.env.SUMMARY_MD_PATH;
              if (p && fs.existsSync(p)) body = fs.readFileSync(p, 'utf8');
            } catch {}
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const existing = comments.find(c => c.user?.type === 'Bot' && c.body?.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            }

      - name: 🔎 Determine bump plan (Changesets status)
        id: plan
        shell: bash
        run: |
          set -euo pipefail
          npx -y @changesets/cli@^2 status --since=origin/main --verbose > .changeset-status.txt || true
          HAS_MINOR=$(grep -n "Packages to be bumped at minor" .changeset-status.txt >/dev/null 2>&1 && echo 1 || echo 0)
          HAS_MAJOR=$(grep -n "Packages to be bumped at major" .changeset-status.txt >/dev/null 2>&1 && echo 1 || echo 0)
          {
            echo "HAS_MINOR=${HAS_MINOR}"
            echo "HAS_MAJOR=${HAS_MAJOR}"
          } >> "$GITHUB_ENV"

      - name: 🚦 Enforce HTML changes require >= minor
        if: env.SNAP_TOTAL != '0'
        shell: bash
        run: |
          set -euo pipefail
          if [ "${HAS_MINOR}" = "0" ] && [ "${HAS_MAJOR}" = "0" ]; then
            echo "::error title=HTML changed but only patch detected::HTML snapshots changed. Please bump at least MINOR in your changeset."
            exit 1
          else
            echo "HTML changed and non-patch bump present → OK."
          fi
