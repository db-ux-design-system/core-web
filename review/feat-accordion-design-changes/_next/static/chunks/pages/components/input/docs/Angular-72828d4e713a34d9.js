(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[31531],{57079:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/input/docs/Angular",function(){return o(10996)}])},10996:function(n,e,o){"use strict";o.r(e),o.d(e,{default:function(){return l}});var t=o(52322),r=o(45392);function i(n){let e={blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"angular",children:"Angular"}),"\n",(0,t.jsxs)(e.p,{children:["Load SCSS globally within ",(0,t.jsx)(e.code,{children:"styles.scss"})," in your app:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scss",children:'@forward "@db-ui/components/build/styles/db-ui-42-rollup";\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Load component within ",(0,t.jsx)(e.code,{children:"app.component.ts"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"//app.component.ts\nimport { DBInput } from '@db-ui/ngx-components';\n\n@Component({\n	// ...\n	imports: [\n		// ...,\n		DBInput\n    ],\n	// ...\n})\n"})}),"\n",(0,t.jsx)(e.p,{children:"Use component in template:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-html",children:'<DBInput\n	label="Label"\n	placeholder="placeholder"\n	description="Description"\n	(change)="onInputChange()"\n></DBInput>\n'})}),"\n",(0,t.jsx)(e.h2,{id:"how-to-use-with-reactive-forms",children:"How to use with Reactive Forms"}),"\n",(0,t.jsx)(e.p,{children:"Third party controls require a ControlValueAccessor to function with angular forms.\nOur input component implements this interface so you can use it like any other native element with reactive Forms:"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"Currently we do not support onTouch/touched and native validation via FormControl. If your interested in contributing, you're very welcome ;)"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"//app.component.ts\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@Component({\n	// ...\n	imports: [\n		// ...,\n		ReactiveFormsModule\n    ],\n	// ...\n})\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-html",children:'<!-- form.component.html-->\n<form [formGroup]="form" (submit)="onFormSubmit()">\n	<db-input label="Input" placeholder="Placeholder" formControlName="input">\n	</db-input>\n</form>\n\n<h2>Output</h2>\n<dl>\n	<dt>input\'s value</dt>\n	<dd>\n		{{ form.get("input")?.value ? form.get("input")?.value : "No Input set"\n		}}\n	</dd>\n</dl>\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'// form.component.ts\nexport class FormComponent {\n	form = new FormGroup({\n		input: new FormControl("Filled with formControl")\n	});\n\n	onFormSubmit(): void {\n		alert(JSON.stringify(this.form.value));\n	}\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"how-to-use-with-template-driven-forms",children:"How to use with Template driven Forms"}),"\n",(0,t.jsx)(e.p,{children:"Third party controls require a ControlValueAccessor to function with angular forms.\nOur input component implements this interface so you can use it like any other native element with ngModel:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"//app.component.ts\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n	// ...\n	imports: [\n		// ...,\n		FormsModule\n    ],\n	// ...\n})\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-html",children:'<!-- form.component.html-->\n<form>\n	<DBInput\n		ngDefaultControl\n		[(ngModel)]="input"\n		label="Textinput"\n		placeholder="Placeholder"\n		description="Description"\n	></DBInput>\n	<DBButton type="button" variant="primary" (click)="showValues()"\n		>Get input value</DBButton\n	>\n</form>\n\n<h2>Output</h2>\n<dl>\n	<dt>input\'s value</dt>\n	<dd>{{ input ? input : "No Input set" }}</dd>\n</dl>\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'// form.component.ts\nexport class FormComponent {\n	input = "";\n	showValues(): void {\n		alert(JSON.stringify({ input: this.input }));\n	}\n}\n'})})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(i,{...n})}):i(n)}}},function(n){n.O(0,[92888,49774,40179],function(){return n(n.s=57079)}),_N_E=n.O()}]);