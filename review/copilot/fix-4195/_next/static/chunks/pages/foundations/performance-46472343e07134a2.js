(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8709],{10012:(e,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>u});var r=s(6029),t=s(70785),i=s(16285);function o(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"performance",children:"Performance"}),"\n",(0,r.jsx)(n.p,{children:"If you need to improve the performance of your application, you can use the following tips:"}),"\n",(0,r.jsx)(n.h2,{id:"minify-with-purgecss-and-csso",children:"Minify with PurgeCSS and CSSO"}),"\n",(0,r.jsxs)(n.p,{children:["When you use the full bundled ",(0,r.jsx)(n.code,{children:".css"})," file we provide, you could easily reduce the file size by removing unused CSS classes. This can be done with ",(0,r.jsx)(n.a,{href:"https://purgecss.com/",children:"PurgeCSS"})," and ",(0,r.jsx)(n.a,{href:"https://github.com/css/csso",children:"CSSO"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Install both with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"npm i purgecss csso --save-dev\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Next you should create a file, e.g. ",(0,r.jsx)(n.code,{children:"purgecss.js"})," in your project root with the following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { writeFileSync } from "node:fs";\n\nimport { PurgeCSS } from "purgecss";\nimport { minify } from "csso";\n\nconst distFolder = "dist"; // TODO: Change me if you need another folder\n\nnew PurgeCSS()\n	.purge({\n		content: [`${distFolder}/**/*.html`, `${distFolder}/**/*.js`],\n		css: [`${distFolder}/**/*.css`],\n		defaultExtractor: (content) => content.match(/[\\w-/:]+(?<!:)/g) || [],\n		variables: true,\n		rejectedCss: true,\n		safelist: {\n			variables: [\n				/* TODO: Keep only the densities you need */\n				/-functional-/,\n				/-regular-/,\n				/-expressive-/,\n				/* Keep density & all color properties/variables */\n				/-default$/,\n				/-hovered$/,\n				/-pressed$/\n			],\n			/* Some components require a safelist */\n			greedy: [\n				/db-tabs/ // TODO: Add more components if necessary\n			]\n		}\n	})\n	.then((purgeCSSResult) => {\n		for (const result of purgeCSSResult) {\n			writeFileSync(result.file, minify(result.css).css);\n\n			/* Optional: for debugging */\n			// writeFileSync(`rejected.css`, result.rejectedCss || "");\n		}\n	});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can run this script with ",(0,r.jsx)(n.code,{children:"node purgecss.js"})," and it will minify your CSS files. You can also add this script to your ",(0,r.jsx)(n.code,{children:"package.json"})," to run after your regular build process:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n	"scripts": {\n		"postbuild": "node purgecss.js"\n	}\n}\n'})})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}let l=e=>{let{children:n}=e;return(0,r.jsx)(t.A,{children:n})};function d(e){return(0,r.jsx)(c,{})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,r.jsx)(l,{...e,children:(0,r.jsx)(d,{...e})})}},95256:(e,n,s)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/foundations/performance",function(){return s(10012)}])}},e=>{e.O(0,[4256,310,4580,7212,785,636,6593,8792],()=>e(e.s=95256)),_N_E=e.O()}]);