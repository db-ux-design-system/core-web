(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2560],{35255:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/foundations/colors/readme",function(){return s(46894)}])},46894:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return h}});var r=s(52322),d=s(97335),c=s(45392);function i(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"colors",children:"Colors"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You use ",(0,r.jsx)(n.strong,{children:"Colors"})," to highlight an area with a specific color."]}),"\n",(0,r.jsxs)(n.li,{children:["You can also use it to change the text color for components with the ",(0,r.jsx)(n.code,{children:"*-transparent-semi"})," colors."]}),"\n",(0,r.jsxs)(n.li,{children:["Most classes/placeholders will change ",(0,r.jsx)(n.code,{children:"color"})," and ",(0,r.jsx)(n.code,{children:"background-color"})," and will set properties, which will be passed down to adaptive components."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"how-to-include-colors",children:"How to include colors"}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.strong,{children:"CSS"})," and ",(0,r.jsx)(n.strong,{children:"Tailwind"})," you need to use the import ",(0,r.jsx)(n.code,{children:'@import "@db-ui/foundations/build/css/color/classes/all.css";'})," in your root ",(0,r.jsx)(n.code,{children:".css"})," file.\nOr if you only want a single variant e.g. ",(0,r.jsx)(n.strong,{children:"informational"})," you can import ",(0,r.jsx)(n.code,{children:'@import "@db-ui/foundations/build/css/color/classes/informational.css";'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In case that you're either using a bundler (recommended) or importing the CSS within your JavaScript files, please adapt this ",(0,r.jsx)(n.code,{children:"@import"})," syntax accordingly."]}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.strong,{children:"SCSS"})," you need to use the import ",(0,r.jsx)(n.code,{children:"@use @db-ui/foundations/build/scss/color/placeholder"})," in your ",(0,r.jsx)(n.code,{children:".scss"})," file, where you need to reference the specific variable.\nThen you can use e.g. ",(0,r.jsx)(n.strong,{children:"informational"})," color by extending our SCSS placeholders like this: ",(0,r.jsx)(n.code,{children:"@extend %db-informational-bg-1"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"how-to-use",children:"How to use"}),"\n",(0,r.jsxs)(n.p,{children:["We're providing an ",(0,r.jsx)(n.a,{href:"./overview",children:"overview for all possible colors"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["There are several variants: ",(0,r.jsx)(n.code,{children:"base"}),", ",(0,r.jsx)(n.code,{children:"brand"}),", ",(0,r.jsx)(n.code,{children:"neutral"}),", ",(0,r.jsx)(n.code,{children:"critical"}),", ",(0,r.jsx)(n.code,{children:"informational"}),", ",(0,r.jsx)(n.code,{children:"successful"}),", ",(0,r.jsx)(n.code,{children:"warning"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["We use ",(0,r.jsx)(n.code,{children:"XXX"})," here you should replace it with a variant from above."]})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Variant"}),(0,r.jsx)(n.th,{children:"CSS"}),(0,r.jsx)(n.th,{children:"SCSS"}),(0,r.jsx)(n.th,{children:"Tailwind"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"XXX-bg-1"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'class="db-XXX-bg-1"'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@extend %db-XXX-bg-1"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'class="db-XXX-bg-1"'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"XXX-bg-2"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'class="db-XXX-bg-2"'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@extend %db-XXX-bg-2"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'class="db-XXX-bg-2"'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"XXX-bg-3"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'class="db-XXX-bg-3"'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@extend %db-XXX-bg-3"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'class="db-XXX-bg-3"'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"XXX-transparent-semi"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'class="db-XXX-bg-transparent-semi"'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@extend %db-XXX-bg-transparent-semi"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'class="db-XXX-bg-transparent-semi"'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"XXX-transparent-full"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'class="db-XXX-bg-transparent-full"'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@extend %db-XXX-bg-transparent-full"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'class="db-XXX-bg-transparent-full"'})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"dark---light-mode",children:"Dark- & Light-Mode"}),"\n",(0,r.jsxs)(n.p,{children:["We provide tokens for both dark- and light-mode. If you include the ",(0,r.jsx)(n.strong,{children:"db-ui-42"})," style you get a media query ",(0,r.jsx)(n.code,{children:"@media (prefers-color-scheme: dark)"})," with the relevant tokens. You can ",(0,r.jsx)(n.a,{href:"https://developer.chrome.com/docs/devtools/rendering/emulate-css/",children:"emulate"})," the modes inside the devtools.\nWe recommend using the default media query based on the user preference, but if you want to force a mode for your page or a container you can do it with adding the attributes ",(0,r.jsx)(n.code,{children:'data-color-scheme="dark"'})," or ",(0,r.jsx)(n.code,{children:'data-color-scheme="light"'}),":"]}),"\n",(0,r.jsx)(n.h4,{id:"html",children:"HTML"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<div data-color-scheme="dark">...</div>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We're providing an example in our ",(0,r.jsx)(n.a,{href:"./color-schemes",children:"color schemes documentation"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["We need to set the ",(0,r.jsx)(n.strong,{children:"base"})," background to the element with ",(0,r.jsx)(n.code,{children:"[data-color-scheme]"})," so if you want to change the background to another color, make sure to use a wrapping tag like ",(0,r.jsx)(n.code,{children:"<div>"})," with the ",(0,r.jsx)(n.code,{children:"[data-color-scheme]"})," to avoid issues."]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let t=e=>{let{children:n}=e;return(0,r.jsx)(d.Z,{children:n})};function l(e){return(0,r.jsx)(o,{})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})})}}},function(e){e.O(0,[49710,97335,92888,49774,40179],function(){return e(e.s=35255)}),_N_E=e.O()}]);