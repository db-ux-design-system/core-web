(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7142],{24745:(n,e,t)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/misc/testing",function(){return t(35907)}])},35907:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>d});var s=t(6029),o=t(16285),i=t(64103);function c(n){let e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"how-to-test-with-db-ux-components",children:"How to Test with DB UX Components"}),"\n",(0,s.jsx)(e.p,{children:"This guide provides recommendations for testing applications that use DB UX Design System components. Since different frameworks have different testing approaches, we've organized this guide by framework."}),"\n",(0,s.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#general-testing-principles",children:"General Testing Principles"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#react-testing",children:"React Testing"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#vue-testing",children:"Vue Testing"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#angular-testing",children:"Angular Testing"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#stencilweb-components-testing",children:"Stencil/Web Components Testing"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#common-testing-scenarios",children:"Common Testing Scenarios"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"general-testing-principles",children:"General Testing Principles"}),"\n",(0,s.jsx)(e.h3,{id:"when-testing-components-vs-applications",children:"When Testing Components vs. Applications"}),"\n",(0,s.jsxs)(e.p,{children:["This guide focuses on testing ",(0,s.jsx)(e.strong,{children:"your applications"})," that use DB UX components, not testing the components themselves. For component development testing, see ",(0,s.jsx)(e.a,{href:"../packages/components/test/readme",children:"packages/components/test/README.md"}),"."]}),"\n",(0,s.jsx)(e.h3,{id:"global-setup-considerations",children:"Global Setup Considerations"}),"\n",(0,s.jsx)(e.p,{children:"When testing applications with DB UX components, you typically need to:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Import CSS styles"})," - Components require proper styling to function correctly"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Set up component libraries"})," - Import the framework-specific component packages"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Configure test environments"})," - Ensure proper DOM environments for component rendering"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Handle icons and assets"})," - Mock or provide icon assets if needed"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"react-testing",children:"React Testing"}),"\n",(0,s.jsx)(e.h3,{id:"package-installation",children:"Package Installation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install @db-ux/react-core-components @db-ux/core-foundations\n"})}),"\n",(0,s.jsx)(e.h3,{id:"test-setup-with-react-testing-library",children:"Test Setup with React Testing Library"}),"\n",(0,s.jsxs)(e.h4,{id:"global-test-setup-setupteststs",children:["Global Test Setup (",(0,s.jsx)(e.code,{children:"setupTests.ts"}),")"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import "@testing-library/jest-dom";\n// Import DB UX styles\nimport "@db-ux/core-components/build/styles/rollup.css";\n\n// Optional: Mock DB UX icons globally if not using real assets\njest.mock("@db-ux/core-foundations/build/styles/icons", () => ({}));\n'})}),"\n",(0,s.jsx)(e.h4,{id:"component-testing-example",children:"Component Testing Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { render, screen, fireEvent } from "@testing-library/react";\nimport { DBButton, DBInput } from "@db-ux/react-core-components";\nimport MyComponent from "./MyComponent";\n\ndescribe("MyComponent with DB UX components", () => {\n	test("should render button and handle click", () => {\n		const handleClick = jest.fn();\n\n		render(\n			<DBButton onClick={handleClick} variant="brand">\n				Click me\n			</DBButton>\n		);\n\n		const button = screen.getByRole("button", { name: /click me/i });\n		expect(button).toBeInTheDocument();\n\n		fireEvent.click(button);\n		expect(handleClick).toHaveBeenCalledTimes(1);\n	});\n\n	test("should type in DB input field", () => {\n		const handleChange = jest.fn();\n\n		render(\n			<DBInput\n				label="Test Input"\n				value=""\n				onChange={handleChange}\n				data-testid="test-input"\n			/>\n		);\n\n		const input = screen.getByTestId("test-input");\n		fireEvent.change(input, { target: { value: "test value" } });\n\n		expect(handleChange).toHaveBeenCalledWith(\n			expect.objectContaining({\n				target: expect.objectContaining({\n					value: "test value"\n				})\n			})\n		);\n	});\n});\n'})}),"\n",(0,s.jsx)(e.h4,{id:"mocking-db-ux-components",children:"Mocking DB UX Components"}),"\n",(0,s.jsx)(e.p,{children:"For unit tests where you want to mock DB UX components:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"// __mocks__/@db-ux/react-core-components.tsx\nexport const DBButton = jest.fn(({ children, onClick, ...props }) => (\n	<button onClick={onClick} {...props}>\n		{children}\n	</button>\n));\n\nexport const DBInput = jest.fn((props) => <input {...props} />);\n"})}),"\n",(0,s.jsx)(e.h4,{id:"playwright-testing-with-react",children:"Playwright Testing with React"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { test, expect } from '@playwright/experimental-ct-react';\nimport { DBButton } from '@db-ux/react-core-components';\n\ntest('DBButton interaction', async ({ mount }) => {\n  let clicked = false;\n\n  const component = await mount(\n    <DBButton onClick={() => clicked = true}>\n      Test Button\n    </DBButton>\n  );\n\n  await component.click();\n  expect(clicked).toBe(true);\n});\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"vue-testing",children:"Vue Testing"}),"\n",(0,s.jsx)(e.h3,{id:"package-installation-1",children:"Package Installation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install @db-ux/v-core-components @db-ux/core-foundations\n"})}),"\n",(0,s.jsx)(e.h3,{id:"test-setup-with-vue-test-utils",children:"Test Setup with Vue Test Utils"}),"\n",(0,s.jsxs)(e.h4,{id:"global-test-setup-vitestconfigts-or-test-setup-file",children:["Global Test Setup (",(0,s.jsx)(e.code,{children:"vitest.config.ts"})," or test setup file)"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import { createApp } from "vue";\nimport { config } from "@vue/test-utils";\n\n// Import DB UX styles\nimport "@db-ux/core-components/build/styles/rollup.css";\n\n// Global component registration (optional)\nimport { DBButton, DBInput } from "@db-ux/v-core-components";\n\nconfig.global.components = {\n	DBButton,\n	DBInput\n};\n'})}),"\n",(0,s.jsx)(e.h4,{id:"component-testing-example-1",children:"Component Testing Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import { mount } from "@vue/test-utils";\nimport { DBButton, DBInput } from "@db-ux/v-core-components";\nimport MyComponent from "./MyComponent.vue";\n\ndescribe("MyComponent with DB UX components", () => {\n	test("should render button and handle click", async () => {\n		const wrapper = mount(DBButton, {\n			props: {\n				variant: "brand"\n			},\n			slots: {\n				default: "Click me"\n			}\n		});\n\n		expect(wrapper.text()).toContain("Click me");\n\n		await wrapper.trigger("click");\n		expect(wrapper.emitted("click")).toHaveLength(1);\n	});\n\n	test("should handle input changes", async () => {\n		const wrapper = mount(DBInput, {\n			props: {\n				label: "Test Input",\n				modelValue: ""\n			}\n		});\n\n		const input = wrapper.find("input");\n		await input.setValue("test value");\n\n		expect(wrapper.emitted("update:modelValue")).toEqual([["test value"]]);\n	});\n});\n'})}),"\n",(0,s.jsx)(e.h4,{id:"mocking-db-ux-components-in-vue",children:"Mocking DB UX Components in Vue"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'// Create mock components\nconst mockDBButton = {\n	name: "DBButton",\n	template: "<button @click=\\"$emit(\'click\', $event)\\"><slot /></button>",\n	emits: ["click"]\n};\n\nconst mockDBInput = {\n	name: "DBInput",\n	template:\n		"<input @input=\\"$emit(\'update:modelValue\', $event.target.value)\\" />",\n	emits: ["update:modelValue"]\n};\n\n// Use in tests\nconst wrapper = mount(MyComponent, {\n	global: {\n		components: {\n			DBButton: mockDBButton,\n			DBInput: mockDBInput\n		}\n	}\n});\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"angular-testing",children:"Angular Testing"}),"\n",(0,s.jsx)(e.h3,{id:"package-installation-2",children:"Package Installation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install @db-ux/ngx-core-components @db-ux/core-foundations\n"})}),"\n",(0,s.jsx)(e.h3,{id:"test-setup-with-angular-testing-utilities",children:"Test Setup with Angular Testing Utilities"}),"\n",(0,s.jsxs)(e.h4,{id:"global-test-setup-testts-or-karmaconfjs",children:["Global Test Setup (",(0,s.jsx)(e.code,{children:"test.ts"})," or ",(0,s.jsx)(e.code,{children:"karma.conf.js"}),")"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// Import DB UX styles in your angular.json or component styles\n// Or in src/styles.css:\n// @import '@db-ux/core-components/build/styles/rollup.css';\n"})}),"\n",(0,s.jsx)(e.h4,{id:"module-setup-for-testing",children:"Module Setup for Testing"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import { ComponentFixture, TestBed } from "@angular/core/testing";\nimport { DBButton, DBInput } from "@db-ux/ngx-core-components";\nimport { MyComponent } from "./my-component.component";\n\ndescribe("MyComponent", () => {\n	let component: MyComponent;\n	let fixture: ComponentFixture<MyComponent>;\n\n	beforeEach(async () => {\n		await TestBed.configureTestingModule({\n			imports: [DBButton, DBInput, MyComponent] // Using standalone components\n		}).compileComponents();\n\n		fixture = TestBed.createComponent(MyComponent);\n		component = fixture.componentInstance;\n		fixture.detectChanges();\n	});\n\n	test("should create", () => {\n		expect(component).toBeTruthy();\n	});\n});\n'})}),"\n",(0,s.jsx)(e.h4,{id:"component-testing-example-2",children:"Component Testing Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import { ComponentFixture, TestBed } from "@angular/core/testing";\nimport { By } from "@angular/platform-browser";\nimport { DBButton } from "@db-ux/ngx-core-components";\n\ndescribe("DBButton Integration", () => {\n	let component: TestHostComponent;\n	let fixture: ComponentFixture<TestHostComponent>;\n\n	@Component({\n		template: `\n			<db-button\n				[variant]="variant"\n				(click)="handleClick($event)"\n				data-testid="test-button"\n			>\n				Test Button\n			</db-button>\n		`,\n		standalone: true,\n		imports: [DBButton]\n	})\n	class TestHostComponent {\n		variant = "brand";\n		clickCount = 0;\n\n		handleClick() {\n			this.clickCount++;\n		}\n	}\n\n	beforeEach(async () => {\n		await TestBed.configureTestingModule({\n			imports: [TestHostComponent]\n		}).compileComponents();\n\n		fixture = TestBed.createComponent(TestHostComponent);\n		component = fixture.componentInstance;\n		fixture.detectChanges();\n	});\n\n	test("should handle button click", () => {\n		const button = fixture.debugElement.query(\n			By.css(\'[data-testid="test-button"]\')\n		);\n\n		button.triggerEventHandler("click", null);\n\n		expect(component.clickCount).toBe(1);\n	});\n});\n'})}),"\n",(0,s.jsx)(e.h4,{id:"mocking-db-ux-components-in-angular",children:"Mocking DB UX Components in Angular"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'// Create mock components\n@Component({\n	selector: "db-button",\n	template:\n		\'<button (click)="click.emit($event)"><ng-content></ng-content></button>\',\n	standalone: true\n})\nclass MockDBButton {\n	@Input() variant: string = "";\n	@Output() click = new EventEmitter();\n}\n\n// Use in tests\nawait TestBed.configureTestingModule({\n	imports: [MockDBButton] // Instead of real DBButton\n}).compileComponents();\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"stencilweb-components-testing",children:"Stencil/Web Components Testing"}),"\n",(0,s.jsx)(e.h3,{id:"package-installation-3",children:"Package Installation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install @db-ux/wc-core-components @db-ux/core-foundations\n"})}),"\n",(0,s.jsx)(e.h3,{id:"test-setup",children:"Test Setup"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import { newSpecPage } from "@stencil/core/testing";\nimport "@db-ux/core-components/build/styles/rollup.css";\n\n// Define custom elements if needed\nimport { defineCustomElements } from "@db-ux/wc-core-components/dist/loader/index.js";\ndefineCustomElements();\n'})}),"\n",(0,s.jsx)(e.h4,{id:"component-testing-example-3",children:"Component Testing Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'describe("Web Components Integration", () => {\n	test("should render db-button", async () => {\n		const page = await newSpecPage({\n			html: `<db-button variant="brand">Test Button</db-button>`\n		});\n\n		expect(page.root).toEqualHtml(`\n      <db-button variant="brand">\n        <button class="db-button" data-variant="brand">\n          Test Button\n        </button>\n      </db-button>\n    `);\n	});\n});\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"common-testing-scenarios",children:"Common Testing Scenarios"}),"\n",(0,s.jsx)(e.h3,{id:"testing-form-interactions",children:"Testing Form Interactions"}),"\n",(0,s.jsx)(e.h4,{id:"react-example",children:"React Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'test("form submission with DB components", async () => {\n	const handleSubmit = jest.fn();\n\n	render(\n		<form onSubmit={handleSubmit}>\n			<DBInput\n				label="Email"\n				type="email"\n				data-testid="email-input"\n				required\n			/>\n			<DBButton type="submit">Submit</DBButton>\n		</form>\n	);\n\n	const emailInput = screen.getByTestId("email-input");\n	const submitButton = screen.getByRole("button", { name: /submit/i });\n\n	fireEvent.change(emailInput, { target: { value: "test@example.com" } });\n	fireEvent.click(submitButton);\n\n	expect(handleSubmit).toHaveBeenCalled();\n});\n'})}),"\n",(0,s.jsx)(e.h3,{id:"testing-navigation-components",children:"Testing Navigation Components"}),"\n",(0,s.jsx)(e.h4,{id:"vue-example",children:"Vue Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'test("navigation item click", async () => {\n	const wrapper = mount(DBNavigation, {\n		props: {\n			items: [\n				{ href: "/home", label: "Home" },\n				{ href: "/about", label: "About" }\n			]\n		}\n	});\n\n	const homeLink = wrapper.find(\'[href="/home"]\');\n	await homeLink.trigger("click");\n\n	expect(wrapper.emitted("navigate")).toBeTruthy();\n});\n'})}),"\n",(0,s.jsx)(e.h3,{id:"testing-accessibility",children:"Testing Accessibility"}),"\n",(0,s.jsx)(e.h4,{id:"playwright-example",children:"Playwright Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import { test, expect } from "@playwright/test";\nimport AxeBuilder from "@axe-core/playwright";\n\ntest("accessibility with DB components", async ({ page }) => {\n	await page.goto("/your-page-with-db-components");\n\n	const accessibilityScanResults = await new AxeBuilder({ page }).analyze();\n\n	expect(accessibilityScanResults.violations).toEqual([]);\n});\n'})}),"\n",(0,s.jsx)(e.h3,{id:"testing-component-state-changes",children:"Testing Component State Changes"}),"\n",(0,s.jsx)(e.h4,{id:"angular-example",children:"Angular Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'test("toggle component state", async () => {\n	const fixture = TestBed.createComponent(TestHostComponent);\n	const component = fixture.componentInstance;\n\n	// Test initial state\n	expect(component.isToggled).toBe(false);\n\n	// Trigger toggle\n	const toggleButton = fixture.debugElement.query(By.css("db-button"));\n	toggleButton.triggerEventHandler("click", null);\n	fixture.detectChanges();\n\n	expect(component.isToggled).toBe(true);\n});\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(e.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,s.jsx)(e.h4,{id:"1-styling-issues-in-tests",children:"1. Styling Issues in Tests"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Components don't render with proper styles"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Make sure to import CSS files in your test setup:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// React\nimport '@db-ux/core-components/build/styles/rollup.css';\n\n// Vue\nimport '@db-ux/core-components/build/styles/rollup.css';\n\n// Angular - Add to angular.json or styles.css\n@import '@db-ux/core-components/build/styles/rollup.css';\n"})}),"\n",(0,s.jsx)(e.h4,{id:"2-icon-loading-issues",children:"2. Icon Loading Issues"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Icons don't load in test environment"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Mock icon dependencies:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'// Jest\njest.mock("@db-ux/core-foundations/build/styles/icons", () => ({}));\n\n// Or provide a test icon set\n'})}),"\n",(0,s.jsx)(e.h4,{id:"3-custom-element-registration-web-components",children:"3. Custom Element Registration (Web Components)"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Custom elements not recognized"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Define custom elements in test setup:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import { defineCustomElements } from "@db-ux/wc-core-components/dist/loader/index.js";\ndefineCustomElements();\n'})}),"\n",(0,s.jsx)(e.h4,{id:"4-typescript-type-issues",children:"4. TypeScript Type Issues"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": TypeScript can't find component types"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Install and import type definitions:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import type { DBButtonProps } from "@db-ux/react-core-components";\n// or\nimport type { DBButtonProps } from "@db-ux/v-core-components";\n// or\nimport type { DBButtonProps } from "@db-ux/ngx-core-components";\n'})}),"\n",(0,s.jsx)(e.h4,{id:"5-event-handling-differences",children:"5. Event Handling Differences"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Events work differently across frameworks"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"React"}),": Use ",(0,s.jsx)(e.code,{children:"onClick"}),", ",(0,s.jsx)(e.code,{children:"onChange"}),", etc."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"<DBButton onClick={handleClick}>Button</DBButton>\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Vue"}),": Use ",(0,s.jsx)(e.code,{children:"@click"}),", ",(0,s.jsx)(e.code,{children:"@change"}),", etc."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<DBButton @click="handleClick">Button</DBButton>\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Angular"}),": Use ",(0,s.jsx)(e.code,{children:"(click)"}),", ",(0,s.jsx)(e.code,{children:"(change)"}),", etc."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<db-button (click)="handleClick()">Button</db-button>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Shallow rendering"}),": Use shallow rendering when testing component logic without full DOM"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Mock heavy components"}),": Mock complex DB components when testing your business logic"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Async operations"}),": Always await async operations in tests"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Memory leaks"}),": Clean up event listeners and timers in test teardown"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Use data-testid attributes"})," for reliable element selection"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Test user interactions"})," rather than implementation details"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Mock external dependencies"})," that aren't part of your component logic"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Test accessibility"})," using tools like @axe-core/playwright"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Keep tests focused"})," - test one behavior per test case"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Use page object models"})," for complex interaction flows"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"For more information about component development and internal testing, see:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"./how-to-develop-a-component",children:"How to develop a component"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"../packages/components/test/readme",children:"Component testing README"})}),"\n"]})]})}function r(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}let l=n=>{let{children:e}=n;return(0,s.jsx)(i.A,{children:e})};function a(n){let e={p:"p",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r,{}),"\n","\n",(0,s.jsx)(e.p,{children:";"})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.jsx)(l,{...n,children:(0,s.jsx)(a,{...n})})}}},n=>{n.O(0,[4256,310,4580,5727,4103,636,6593,8792],()=>n(n.s=24745)),_N_E=n.O()}]);