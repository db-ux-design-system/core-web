(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[37968],{76293:function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/layout/drawer/overview",function(){return n(12501)}])},88125:function(t,e,n){"use strict";n.r(e);var a=n(52322),r=n(2784),o=n(70741),l=n(57092),d=n(57884),s=n(57284),c=n(49953),i=n(10326);e.default=()=>{let[t,e]=(0,r.useState)();return(0,r.useEffect)(()=>{t&&setTimeout(()=>e(""),1500)},[t]),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.Z,{className:"tab-container",children:(0,a.jsxs)(l.Z,{children:[(0,a.jsxs)(d.Z,{children:[(0,a.jsx)(s.Z,{children:"Angular"}),(0,a.jsx)(s.Z,{children:"HTML"}),(0,a.jsx)(s.Z,{children:"React"}),(0,a.jsx)(s.Z,{children:"Vue"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-html",children:'<db-drawer [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	No rounding (Default)\n</db-drawer>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<db-drawer [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	No rounding (Default)\n</db-drawer>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<db-drawer [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	No rounding (Default)\n</db-drawer>'),navigator.clipboard.writeText('<db-drawer [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	No rounding (Default)\n</db-drawer>')},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-html",children:'<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">No rounding (Default)</div>\n  </article>\n</dialog>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">No rounding (Default)</div>\n  </article>\n</dialog>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">No rounding (Default)</div>\n  </article>\n</dialog>'),navigator.clipboard.writeText('<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">No rounding (Default)</div>\n  </article>\n</dialog>')},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-tsx",children:"<DBDrawer\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  No rounding (Default)\n</DBDrawer>"})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:"<DBDrawer\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  No rounding (Default)\n</DBDrawer>"===t?"check":"copy",variant:"ghost",onClick:()=>{e("<DBDrawer\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  No rounding (Default)\n</DBDrawer>"),navigator.clipboard.writeText("<DBDrawer\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  No rounding (Default)\n</DBDrawer>")},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-tsx",children:'<DBDrawer :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">No rounding (Default)</DBDrawer>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<DBDrawer :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">No rounding (Default)</DBDrawer>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<DBDrawer :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">No rounding (Default)</DBDrawer>'),navigator.clipboard.writeText('<DBDrawer :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">No rounding (Default)</DBDrawer>')},children:"Copy code"})]})]})}),(0,a.jsx)(o.Z,{className:"tab-container",children:(0,a.jsxs)(l.Z,{children:[(0,a.jsxs)(d.Z,{children:[(0,a.jsx)(s.Z,{children:"Angular"}),(0,a.jsx)(s.Z,{children:"HTML"}),(0,a.jsx)(s.Z,{children:"React"}),(0,a.jsx)(s.Z,{children:"Vue"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-html",children:'<db-drawer [rounded]="true" [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	Rounded\n</db-drawer>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<db-drawer [rounded]="true" [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	Rounded\n</db-drawer>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<db-drawer [rounded]="true" [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	Rounded\n</db-drawer>'),navigator.clipboard.writeText('<db-drawer [rounded]="true" [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	Rounded\n</db-drawer>')},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-html",children:'<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container" data-rounded="true">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">Rounded</div>\n  </article>\n</dialog>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container" data-rounded="true">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">Rounded</div>\n  </article>\n</dialog>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container" data-rounded="true">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">Rounded</div>\n  </article>\n</dialog>'),navigator.clipboard.writeText('<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container" data-rounded="true">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">Rounded</div>\n  </article>\n</dialog>')},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-tsx",children:"<DBDrawer\n  rounded\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  Rounded\n</DBDrawer>"})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:"<DBDrawer\n  rounded\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  Rounded\n</DBDrawer>"===t?"check":"copy",variant:"ghost",onClick:()=>{e("<DBDrawer\n  rounded\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  Rounded\n</DBDrawer>"),navigator.clipboard.writeText("<DBDrawer\n  rounded\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  Rounded\n</DBDrawer>")},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-tsx",children:'<DBDrawer :rounded="true" :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">Rounded</DBDrawer>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<DBDrawer :rounded="true" :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">Rounded</DBDrawer>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<DBDrawer :rounded="true" :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">Rounded</DBDrawer>'),navigator.clipboard.writeText('<DBDrawer :rounded="true" :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">Rounded</DBDrawer>')},children:"Copy code"})]})]})})]})}},9337:function(t,e,n){"use strict";n.r(e);var a=n(52322),r=n(2784),o=n(70741),l=n(57092),d=n(57884),s=n(57284),c=n(49953),i=n(10326);e.default=()=>{let[t,e]=(0,r.useState)();return(0,r.useEffect)(()=>{t&&setTimeout(()=>e(""),1500)},[t]),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.Z,{className:"tab-container",children:(0,a.jsxs)(l.Z,{children:[(0,a.jsxs)(d.Z,{children:[(0,a.jsx)(s.Z,{children:"Angular"}),(0,a.jsx)(s.Z,{children:"HTML"}),(0,a.jsx)(s.Z,{children:"React"}),(0,a.jsx)(s.Z,{children:"Vue"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-html",children:'<db-drawer [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	With padding (Default)\n</db-drawer>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<db-drawer [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	With padding (Default)\n</db-drawer>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<db-drawer [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	With padding (Default)\n</db-drawer>'),navigator.clipboard.writeText('<db-drawer [withCloseButton]="true" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	With padding (Default)\n</db-drawer>')},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-html",children:'<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">With padding (Default)</div>\n  </article>\n</dialog>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">With padding (Default)</div>\n  </article>\n</dialog>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">With padding (Default)</div>\n  </article>\n</dialog>'),navigator.clipboard.writeText('<dialog class="db-drawer" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">With padding (Default)</div>\n  </article>\n</dialog>')},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-tsx",children:"<DBDrawer\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  With padding (Default)\n</DBDrawer>"})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:"<DBDrawer\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  With padding (Default)\n</DBDrawer>"===t?"check":"copy",variant:"ghost",onClick:()=>{e("<DBDrawer\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  With padding (Default)\n</DBDrawer>"),navigator.clipboard.writeText("<DBDrawer\n  withCloseButton\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  With padding (Default)\n</DBDrawer>")},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-tsx",children:'<DBDrawer :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">With padding (Default)</DBDrawer>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<DBDrawer :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">With padding (Default)</DBDrawer>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<DBDrawer :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">With padding (Default)</DBDrawer>'),navigator.clipboard.writeText('<DBDrawer :withCloseButton="true" :open="openDrawer" @close="toggleDrawer(false)">With padding (Default)</DBDrawer>')},children:"Copy code"})]})]})}),(0,a.jsx)(o.Z,{className:"tab-container",children:(0,a.jsxs)(l.Z,{children:[(0,a.jsxs)(d.Z,{children:[(0,a.jsx)(s.Z,{children:"Angular"}),(0,a.jsx)(s.Z,{children:"HTML"}),(0,a.jsx)(s.Z,{children:"React"}),(0,a.jsx)(s.Z,{children:"Vue"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-html",children:'<db-drawer [withCloseButton]="true" width="full" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	Full\n</db-drawer>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<db-drawer [withCloseButton]="true" width="full" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	Full\n</db-drawer>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<db-drawer [withCloseButton]="true" width="full" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	Full\n</db-drawer>'),navigator.clipboard.writeText('<db-drawer [withCloseButton]="true" width="full" [open]="openDrawer" (onClose)="toggleDrawer(false)">\n	Full\n</db-drawer>')},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-html",children:'<dialog class="db-drawer" width="full" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">Full</div>\n  </article>\n</dialog>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<dialog class="db-drawer" width="full" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">Full</div>\n  </article>\n</dialog>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<dialog class="db-drawer" width="full" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">Full</div>\n  </article>\n</dialog>'),navigator.clipboard.writeText('<dialog class="db-drawer" width="full" data-backdrop="strong" open>\n  <article class="db-drawer-container">\n    <header class="db-drawer-header">\n      <button\n        class="db-button button-close-drawer is-icon-text-replace"\n        data-icon="close"\n        data-variant="text"\n      >\n        Close Button\n      </button>\n    </header>\n    <div class="db-drawer-content">Full</div>\n  </article>\n</dialog>')},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-tsx",children:'<DBDrawer\n  withCloseButton\n  width="full"\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  Full\n</DBDrawer>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<DBDrawer\n  withCloseButton\n  width="full"\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  Full\n</DBDrawer>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<DBDrawer\n  withCloseButton\n  width="full"\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  Full\n</DBDrawer>'),navigator.clipboard.writeText('<DBDrawer\n  withCloseButton\n  width="full"\n  open={open}\n  onClose={() => {\n    setOpen(false)\n  }}\n>\n  Full\n</DBDrawer>')},children:"Copy code"})]}),(0,a.jsxs)(c.Z,{children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{className:"hljs language-tsx",children:'<DBDrawer :withCloseButton="true" width="full" :open="openDrawer" @close="toggleDrawer(false)">\n		Full\n	</DBDrawer>'})}),(0,a.jsx)(i.Z,{className:"copy-button",noText:!0,icon:'<DBDrawer :withCloseButton="true" width="full" :open="openDrawer" @close="toggleDrawer(false)">\n		Full\n	</DBDrawer>'===t?"check":"copy",variant:"ghost",onClick:()=>{e('<DBDrawer :withCloseButton="true" width="full" :open="openDrawer" @close="toggleDrawer(false)">\n		Full\n	</DBDrawer>'),navigator.clipboard.writeText('<DBDrawer :withCloseButton="true" width="full" :open="openDrawer" @close="toggleDrawer(false)">\n		Full\n	</DBDrawer>')},children:"Copy code"})]})]})})]})}},12501:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return h}});var a=n(52322),r=n(14592),o=n(9337),l=n(88125),d=n(24712),s=n(77837),c=n(5513),i=n(2784),w=n(12480),u=JSON.parse('[{"name":"Density","examples":[{"name":"Functional","className":"db-density-functional","props":{},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">functional</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tfunctional\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tfunctional\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">\\n\\t\\tfunctional\\n\\t</DBDrawer>"}},{"name":"(Default) Regular","className":"db-density-regular","props":{},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">Regular (Default)</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tRegular (Default)\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tRegular (Default)\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">\\n\\t\\tRegular (Default)\\n\\t</DBDrawer>"}},{"name":"Expressive","className":"db-density-expressive","props":{},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">expressive</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\texpressive\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\texpressive\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">\\n\\t\\texpressive\\n\\t</DBDrawer>"}}]},{"name":"Size","examples":[{"name":"(Default) Medium","props":{"withCloseButton":true},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">With padding (Default)</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tWith padding (Default)\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tWith padding (Default)\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">With padding (Default)</DBDrawer>"}},{"name":"Full","props":{"withCloseButton":true,"width":"full"},"code":{"html":"<dialog class=\\"db-drawer\\" width=\\"full\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">Full</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer [withCloseButton]=\\"true\\" width=\\"full\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tFull\\n</db-drawer>","react":"\\t\\t\\t<DBDrawer\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\twidth=\\"full\\"\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tFull\\n\\t\\t\\t</DBDrawer>","vue":"\\t<DBDrawer :withCloseButton=\\"true\\" width=\\"full\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">\\n\\t\\tFull\\n\\t</DBDrawer>"}}]},{"name":"Rounded","examples":[{"name":"(Default) No rounding","props":{"withCloseButton":true},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">No rounding (Default)</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tNo rounding (Default)\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tNo rounding (Default)\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">No rounding (Default)</DBDrawer>"}},{"name":"Rounded","props":{"withCloseButton":true,"rounded":true},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\" data-rounded=\\"true\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">Rounded</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer [rounded]=\\"true\\" [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tRounded\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\trounded\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tRounded\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer :rounded=\\"true\\" :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">Rounded</DBDrawer>"}}]},{"name":"Spacing","examples":[{"name":"(Default) Medium","props":{"withCloseButton":true},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">Medium (Default)</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tMedium (Default)\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tMedium (Default)\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">Medium (Default)</DBDrawer>"}},{"name":"Small","props":{"withCloseButton":true,"spacing":"small"},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\" data-spacing=\\"small\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">Small</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer spacing=\\"small\\" [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tSmall\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\tspacing=\\"small\\"\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tSmall\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer spacing=\\"small\\" :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">Small</DBDrawer>"}},{"name":"Large","props":{"withCloseButton":true,"spacing":"large"},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\" data-spacing=\\"large\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">Large</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer spacing=\\"large\\" [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tLarge\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\tspacing=\\"large\\"\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tLarge\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer spacing=\\"large\\" :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">Large</DBDrawer>"}},{"name":"No spacing","props":{"withCloseButton":true,"spacing":"none"},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\" data-spacing=\\"none\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">None</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer spacing=\\"none\\" [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tNone\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\tspacing=\\"none\\"\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tNone\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer spacing=\\"none\\" :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">None</DBDrawer>"}}]},{"name":"Backdrop","examples":[{"name":"(Default) With Backdrop","props":{"withCloseButton":true},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">With Backdrop (Default)</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tWith Backdrop (Default)\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tWith Backdrop (Default)\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">With Backdrop (Default)</DBDrawer>"}},{"name":"Backdrop-weak","props":{"withCloseButton":true,"backdrop":"weak"},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"weak\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">Backdrop-weak</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer backdrop=\\"weak\\" [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tBackdrop-weak\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\tbackdrop=\\"weak\\"\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tBackdrop-weak\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer backdrop=\\"weak\\" :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">Backdrop-weak</DBDrawer>"}},{"name":"Invisible","props":{"withCloseButton":true,"backdrop":"invisible"},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"invisible\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">No Backdrop</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer backdrop=\\"invisible\\" [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tNo Backdrop\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\tbackdrop=\\"invisible\\"\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tNo Backdrop\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer backdrop=\\"invisible\\" :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">No Backdrop</DBDrawer>"}},{"name":"No Backdrop","props":{"withCloseButton":true,"backdrop":"none"},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"none\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">No Backdrop</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer backdrop=\\"none\\" [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tNo Backdrop\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\tbackdrop=\\"none\\"\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tNo Backdrop\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer backdrop=\\"none\\" :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">No Backdrop</DBDrawer>"}}]},{"name":"Directions","examples":[{"name":"(Default) Right","props":{"withCloseButton":true},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">Right (Default)</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tRight (Default)\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tRight (Default)\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">Right (Default)</DBDrawer>"}},{"name":"Left","props":{"withCloseButton":true,"direction":"left"},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\" data-direction=\\"left\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">Left</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer direction=\\"left\\" [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tLeft\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\tdirection=\\"left\\"\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tLeft\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer direction=\\"left\\" :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">Left</DBDrawer>"}},{"name":"Up","props":{"withCloseButton":true,"direction":"up"},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\" data-direction=\\"up\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">Up</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer direction=\\"left\\" [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tUp\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\tdirection=\\"left\\"\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tUp\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer direction=\\"left\\" :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">Up</DBDrawer>"}},{"name":"Down","props":{"withCloseButton":true,"direction":"down"},"code":{"html":"<dialog class=\\"db-drawer\\" data-backdrop=\\"strong\\" open>\\n\\t\\t<article class=\\"db-drawer-container\\" data-direction=\\"down\\">\\n\\t\\t\\t<header class=\\"db-drawer-header\\">\\n\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\tclass=\\"db-button button-close-drawer is-icon-text-replace\\"\\n\\t\\t\\t\\t\\tdata-icon=\\"close\\"\\n\\t\\t\\t\\t\\tdata-variant=\\"text\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tClose Button\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</header>\\n\\t\\t\\t<div class=\\"db-drawer-content\\">Down</div>\\n\\t\\t</article>\\n\\t</dialog>","angular":"<db-drawer direction=\\"left\\" [withCloseButton]=\\"true\\" [open]=\\"openDrawer\\" (onClose)=\\"toggleDrawer(false)\\">\\n\\tDown\\n</db-drawer>","react":"<DBDrawer\\n\\t\\t\\t\\tdirection=\\"left\\"\\n\\t\\t\\t\\twithCloseButton\\n\\t\\t\\t\\topen={open}\\n\\t\\t\\t\\tonClose={() => {\\n\\t\\t\\t\\t\\tsetOpen(false);\\n\\t\\t\\t\\t}}\\n\\t\\t\\t>\\n\\t\\t\\t\\tDown\\n\\t\\t\\t</DBDrawer>","vue":"<DBDrawer direction=\\"left\\" :withCloseButton=\\"true\\" :open=\\"openDrawer\\" @close=\\"toggleDrawer(false)\\">Down</DBDrawer>"}}]}]'),p=n(47439),D=n(45016);let b=t=>{let{id:e,width:n,rounded:r,withCloseButton:o,spacing:l,openDrawer:d,setOpenDrawer:s,direction:c,children:i,backdrop:u}=t;return(0,a.jsxs)("div",{children:[(0,a.jsx)(w.TG,{withCloseButton:o,rounded:r,width:n,spacing:l,backdrop:u,direction:c,open:d===e,onClose:()=>{s(void 0)},children:i}),(0,a.jsxs)(w.Y1,{onClick:()=>{s(e)},children:["Open: ",i]})]})};var h=()=>{let[t,e]=(0,i.useState)(void 0);return(0,a.jsx)(p.Z,{title:"DBDrawer",variants:(0,D.P)(u,n=>b({...n,openDrawer:t,setOpenDrawer:e}),[(0,a.jsx)(r.default,{}),(0,a.jsx)(o.default,{}),(0,a.jsx)(l.default,{}),(0,a.jsx)(d.default,{}),(0,a.jsx)(s.default,{}),(0,a.jsx)(c.default,{})])})}}},function(t){t.O(0,[49710,97335,4101,77837,24712,5513,14592,92888,49774,40179],function(){return t(t.s=76293)}),_N_E=t.O()}]);