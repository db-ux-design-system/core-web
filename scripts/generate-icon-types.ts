/*
 * This script can be used to update the icon type for all components using icons.
 */

import { readdirSync, lstatSync, writeFileSync } from 'node:fs';

const foundationAssetsPath =
	'../packages/foundations/assets/icons/functional/images';

const generateIconTypes = () => {
	try {
		const allIcons: string[] = [];
		const icons = readdirSync(foundationAssetsPath)
			// eslint-disable-next-line unicorn/no-array-reduce
			.reduce((previousValue, currentValue) => {
				const pathString = `${foundationAssetsPath}/${currentValue}`;

				if (
					currentValue.includes('.svg') ||
					!lstatSync(pathString).isDirectory()
				) {
					return previousValue;
				}

				const iconPaths = readdirSync(pathString);

				return [
					...previousValue,
					`// Directory: ${currentValue}`,
					...iconPaths
				];
			}, [])
			.filter(
				(icon) =>
					(!icon.includes('_inverted') &&
						!icon.includes('_filled') &&
						icon.includes('_24')) ||
					icon.startsWith('//')
			)
			.map((icon) =>
				icon
					.replace('db_ic_', '')
					.replace('_24.svg', '')
					.replaceAll('-', '_')
			)
			.map((icon) => {
				if (icon.startsWith('//')) {
					return icon;
				}

				allIcons.push(icon);

				return `| '${icon}'`;
			});

		const generatedDisclaimer =
			'This file was generated by ./scripts/generate-icon-types.js';
		const iconTypes = `/* ${generatedDisclaimer} */
		export type IconTypes = string \n ${icons.join('\n')}`;
		const allIconsFile = `/* ${generatedDisclaimer} */
		export const ALL_ICONS: string[] = ${JSON.stringify(allIcons)};`;
		const iconHtml = `<!--${generatedDisclaimer}-->
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<title>Icon Overview</title>
		<link
			rel="stylesheet"
			href="/build/css/db-ui-foundations-absolute.css"
		/>
		<link rel="stylesheet" href="/build/css/default-theme.css" />
		<link rel="stylesheet" href="/build/css/internals.css" />
		<link rel="stylesheet" href="/build/css/icons/include-absolute.css" />
		<style>
			.db-infotext {
				display: none !important;
			}
		</style>
	</head>

	<body>
		<div class="icons-overview-container">
		${allIcons
			.map(
				(icon) => `
<div data-spacing="small" class="db-card">
<span
aria-hidden="true"
class="db-icon"
data-icon="${icon}"
>${icon}</span
><span
class="db-infotext"
data-icon="none"
data-semantic="informational"
>${icon}</span
>
</div>`
			)
			.join('\n')}
</div>
</body>
</html>`;
		writeFileSync(
			'../packages/components/src/shared/icon-types.ts',
			iconTypes
		);
		writeFileSync(
			'../packages/components/src/shared/all-icons.ts',
			allIconsFile
		);
		writeFileSync('../packages/foundations/src/icons.html', iconHtml);
	} catch (error) {
		console.error(error);
	}
};

generateIconTypes();
