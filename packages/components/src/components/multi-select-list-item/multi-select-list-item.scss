@use "@db-ux/core-foundations/build/styles/variables";
@use "@db-ux/core-foundations/build/styles/colors";
@use "@db-ux/core-foundations/build/styles/helpers";
@use "@db-ux/core-foundations/build/styles/fonts";
@use "../../styles/multi-select-components";

.db-multi-select-list-item {
	display: flex;
	block-size: 100%;
	position: relative;
	padding: variables.$db-spacing-fixed-sm;
	background-color: colors.$db-adaptive-bg-basic-transparent-full-default;
	border-radius: variables.$db-border-radius-xs;
	box-sizing: border-box;

	&:has(> label) {
		@include helpers.hover {
			background-color: colors.$db-adaptive-bg-basic-transparent-hovered;
		}

		@include helpers.active {
			background-color: colors.$db-adaptive-bg-basic-transparent-pressed;
		}
	}

	&:has(> label > input:focus-within) {
		@extend %focus-placeholder;
	}

	&:has(
			span:is(
					[data-group-label-poistion="bottom"],
					:not([data-group-label-poistion])
				)
		) {
		padding-block-end: 0;
	}

	span {
		@extend %db-overwrite-font-size-md;

		font-weight: 700;
		color: colors.$db-adaptive-on-bg-basic-emphasis-90-default;
	}

	> label {
		inline-size: 100%;

		&:has(input:checked) {
			font-weight: 700;
		}

		> input {
			&::after {
				position: absolute;
				content: "";
				inset-block: calc(-1 * #{variables.$db-spacing-fixed-xs});
				inset-inline: calc(-1 * #{variables.$db-spacing-fixed-xs});
			}

			// We revert interaction states for checkbox
			@include helpers.hover {
				background-color: colors.$db-adaptive-bg-basic-transparent-full-default;
			}

			@include helpers.active {
				background-color: colors.$db-adaptive-bg-basic-transparent-full-default;
			}

			/* We set focus on complete list element, we remove it from checkbox with this trick */
			&:focus-visible {
				outline: none;
			}
		}
	}
}
