@use "@db-ux/core-foundations/build/styles/variables";
@use "@db-ux/core-foundations/build/styles/colors";
@use "@db-ux/core-foundations/build/styles/fonts";
@use "@db-ux/core-foundations/build/styles/helpers";
@use "@db-ux/core-foundations/build/styles/icons";
@use "../../styles/internal/form-components";

// We need some fixed padding here to avoid layout shifts
/* stylelint-disable-next-line db-ux/use-spacings */
$switch-fixed-padding: helpers.px-to-rem(2);
$switch-inactive-thumb-size: calc(
	#{form-components.$font-size-height} - #{$switch-fixed-padding} * 2
);
$switch-active-thumb-size: calc(#{form-components.$font-size-height});
$checked-active-transition-size: calc(
	#{form-components.$font-size-height} - #{$switch-fixed-padding} * 2
);

%active-transition {
	&::before {
		inline-size: calc(
			#{$switch-active-thumb-size} - #{$switch-fixed-padding} * 2 +
				#{variables.$db-spacing-fixed-2xs}
		);
		margin: 0;
	}

	&:checked {
		&::before {
			block-size: $checked-active-transition-size;
		}
	}
}

.db-switch {
	user-select: none;

	@extend %helper-message;
	@include form-components.set-default-check-element;

	&:not([data-hide-asterisk="true"]) {
		&:has(input:required),
		&[data-required="true"] {
			> label::after {
				/* We remove default asterisk because we need a wrapping span for switch */
				content: none;
			}

			> label > span::after {
				@include icons.icon-content("*");
			}
		}
	}

	&:not(:has(input:disabled)) {
		@include form-components.get-state;

		@include form-components.get-state("active") {
			@extend %active-transition;
		}
	}

	@include form-components.get-validity(check) {
		&:has(.db-infotext[data-semantic="successful"]) {
			@include form-components.get-validity-color-checkbox("valid");
		}
	}

	@include form-components.get-validity(check, "invalid") {
		@include form-components.get-validity-color-checkbox("invalid");
	}

	input {
		--db-icon-margin-start: 0;
		--thumb-offset-x: #{$switch-fixed-padding};

		@extend %db-overwrite-font-size-sm;

		appearance: none;
		margin-inline-end: 0;
		inline-size: calc(
			#{form-components.$font-size-height} * 2 + #{$switch-fixed-padding}
		);
		block-size: form-components.$font-size-height;
		box-sizing: content-box;

		@include helpers.display(flex);

		align-items: center;
		/* stylelint-disable-next-line db-ux/use-spacings */
		gap: $switch-fixed-padding;
		border-radius: variables.$db-border-radius-full;

		@include icons.set-icon("cross", "after");

		&::after {
			--db-icon-color: #{colors.$db-adaptive-on-bg-basic-emphasis-100-default};

			visibility: hidden;
			align-self: center;
			aspect-ratio: 1;
		}

		// thumb
		&::before {
			content: "Â°" / ""; // This is a workaround for forced-colors mode from browser
			text-align: center;
			align-content: center;
			aspect-ratio: 1;
			block-size: $switch-inactive-thumb-size;
			background-color: var(
				--db-check-element-border-color,
				#{colors.$db-adaptive-on-bg-basic-emphasis-100-default}
			);
			color: var(
				--db-check-element-border-color,
				#{colors.$db-adaptive-on-bg-basic-emphasis-100-default}
			);
			border-radius: variables.$db-border-radius-full;
			transform: translateX(var(--thumb-offset-x));
			margin-inline-end: calc(
				#{$switch-active-thumb-size} - #{$switch-inactive-thumb-size}
			);

			@media screen and (prefers-reduced-motion: no-preference) {
				transition:
					margin variables.$db-transition-duration-fast
						variables.$db-transition-timing-emotional,
					inline-size variables.$db-transition-duration-fast
						variables.$db-transition-timing-emotional,
					block-size variables.$db-transition-duration-fast
						variables.$db-transition-timing-emotional,
					transform variables.$db-transition-duration-fast
						variables.$db-transition-timing-emotional,
					visibility variables.$db-transition-duration-fast
						variables.$db-transition-timing-emotional;
			}
		}

		/* positioned at the end of the track: track length - 100% (thumb width) */
		&:checked {
			--thumb-offset-x: calc(100% + #{$switch-fixed-padding});
			--db-icon-color: var(--db-adaptive-on-bg-inverted-default);
			--db-adaptive-bg-basic-transparent-full-default: var(
				--db-adaptive-bg-inverted-contrast-max-default
			);
			--db-adaptive-bg-basic-transparent-full-hovered: var(
				--db-adaptive-bg-inverted-contrast-max-hovered
			);
			--db-adaptive-bg-basic-transparent-full-pressed: var(
				--db-adaptive-bg-inverted-contrast-max-pressed
			);

			&::after {
				--db-icon-color: #{colors.$db-adaptive-on-bg-inverted-default};
			}

			&::before {
				block-size: $switch-active-thumb-size;
				background-color: colors.$db-adaptive-on-bg-inverted-default;
				color: colors.$db-adaptive-on-bg-inverted-default;
				margin: 0;
			}
		}

		&:focus-visible {
			// Overwrite default border-radius
			border-radius: variables.$db-border-radius-full;
		}

		&[data-aid-icon]:not(:checked)::after {
			--db-icon-trailing: attr(data-aid-icon);
		}

		&[data-aid-icon-trailing]:checked::after {
			--db-icon-trailing: attr(data-aid-icon-trailing);
		}

		@media screen and (prefers-reduced-motion: no-preference) {
			// Overwrite default transition for switch border
			transition: none;
		}
	}

	> label {
		gap: variables.$db-spacing-fixed-xs;
	}

	&[data-hide-label="true"] {
		> label {
			gap: 0;

			> span {
				font-size: 0;
			}
		}
	}

	&[data-size="small"] {
		> label {
			gap: variables.$db-spacing-fixed-2xs;
		}

		input {
			@extend %db-overwrite-font-size-xs;
		}
	}

	&[data-visual-aid="true"] {
		input {
			&::after {
				visibility: visible;
				block-size: $switch-active-thumb-size;

				@media screen and (prefers-reduced-motion: no-preference) {
					transition: transform variables.$db-transition-duration-fast
						variables.$db-transition-timing-emotional;
				}
			}

			&:checked {
				&:not([data-aid-icon]) {
					@include icons.set-icon("check", "after");
				}

				&::after {
					transform: translateX(
						calc(-100% - #{$switch-fixed-padding})
					);
					transform-origin: center right;
				}
			}
		}
	}

	/* Label position (leading/trailing) */
	&:not([data-variant="leading"]) {
		> label {
			flex-direction: row;
		}
	}

	&[data-variant="leading"] {
		> label {
			flex-direction: row-reverse;
		}
	}
}
