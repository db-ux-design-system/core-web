@use "@db-ux/core-foundations/build/styles/variables";
@use "@db-ux/core-foundations/build/styles/colors";
@use "@db-ux/core-foundations/build/styles/fonts";
@use "@db-ux/core-foundations/build/styles/helpers";
@use "@db-ux/core-foundations/build/styles/icons";
@use "../../styles/internal/form-components";

// We need some fixed padding here to avoid layout shifts
/* stylelint-disable-next-line db-ux/use-spacings */
$switch-fixed-padding: helpers.px-to-rem(2);
$switch-inactive-thumb-size: calc(
	#{form-components.$font-size-height} - #{$switch-fixed-padding} * 2
);
$switch-active-thumb-size: calc(#{form-components.$font-size-height});
$checked-active-transition-size: calc(
	#{form-components.$font-size-height} - #{$switch-fixed-padding} * 2
);

%active-transition {
	&::before {
		inline-size: calc(
			#{$switch-active-thumb-size} - #{$switch-fixed-padding} * 2 +
				#{variables.$db-spacing-fixed-2xs}
		);
		margin: 0;
	}

	&:checked {
		&::before {
			block-size: $checked-active-transition-size;
		}
	}
}

// TODO: Move to e.g. form-components
@mixin switch-validity($key, $label-var, $border-var) {
	@include form-components.get-validity("switch", $key) {
		@include form-components.get-validity-message($key);

		--db-check-element-label-color: #{$label-var};
		--db-check-element-border-color: #{$border-var};

		> input {
			@if $key == "valid" {
				border-color: colors.$db-successful-on-bg-basic-emphasis-70-default;
			} @else if $key == "invalid" {
				border-color: colors.$db-critical-on-bg-basic-emphasis-70-default;
			}
		}

		> input:not(:checked)::before {
			background-color: var(--db-check-element-border-color);
			color: var(--db-check-element-border-color);
		}

		> input:checked {
			background-color: var(--db-check-element-border-color);

			@if $key == "valid" {
				border-color: colors.$db-successful-on-bg-basic-emphasis-70-default;
			} @else if $key == "invalid" {
				border-color: colors.$db-critical-on-bg-basic-emphasis-70-default;
			}

			@include helpers.hover {
				background-color: var(--db-check-element-border-color);

				@if $key == "valid" {
					border-color: colors.$db-successful-on-bg-basic-emphasis-70-default;
				} @else if $key == "invalid" {
					border-color: colors.$db-critical-on-bg-basic-emphasis-70-default;
				}
			}

			@include helpers.active {
				background-color: var(--db-check-element-border-color);

				@if $key == "valid" {
					border-color: colors.$db-successful-on-bg-basic-emphasis-70-default;
				} @else if $key == "invalid" {
					border-color: colors.$db-critical-on-bg-basic-emphasis-70-default;
				}
			}
		}

		> input:checked::before {
			@if $key == "valid" {
				background-color: colors.$db-successful-on-bg-inverted-default;
				color: colors.$db-successful-on-bg-inverted-default;
			} @else if $key == "invalid" {
				background-color: colors.$db-critical-on-bg-inverted-default;
				color: colors.$db-critical-on-bg-inverted-default;
			}
		}
	}
}

.db-switch {
	user-select: none;

	/* enforce flex and break also in Angular */
	display: inline-flex;
	align-items: center;
	flex-wrap: wrap;

	@extend %helper-message;
	@include form-components.set-default-check-element;

	&:not(:has(input:disabled)) {
		@include form-components.get-state;

		@include form-components.get-state("active") {
			@extend %active-transition;
		}
	}

	> input {
		--db-icon-margin-start: 0;
		--thumb-offset-x: #{$switch-fixed-padding};

		@extend %db-overwrite-font-size-sm;

		appearance: none;
		inline-size: calc(
			#{form-components.$font-size-height} * 2 + #{$switch-fixed-padding}
		);
		block-size: form-components.$font-size-height;
		box-sizing: content-box;
		display: flex;
		align-items: center;
		/* stylelint-disable-next-line db-ux/use-spacings */
		gap: $switch-fixed-padding;
		border-radius: variables.$db-border-radius-full;

		@include icons.set-icon("cross", "after");

		&::after {
			--db-icon-color: #{colors.$db-adaptive-on-bg-basic-emphasis-100-default};

			visibility: hidden;
			align-self: center;
			aspect-ratio: 1;
		}

		// thumb
		&::before {
			content: "Â°" / ""; // This is a workaround for forced-colors mode from browser
			text-align: center;
			align-content: center;
			aspect-ratio: 1;
			block-size: $switch-inactive-thumb-size;
			background-color: colors.$db-adaptive-on-bg-basic-emphasis-100-default;
			color: colors.$db-adaptive-on-bg-basic-emphasis-100-default;
			border-radius: variables.$db-border-radius-full;
			transform: translateX(var(--thumb-offset-x));
			margin-inline-end: calc(
				#{$switch-active-thumb-size} - #{$switch-inactive-thumb-size}
			);

			@media screen and (prefers-reduced-motion: no-preference) {
				transition:
					margin variables.$db-transition-duration-fast
						variables.$db-transition-timing-emotional,
					inline-size variables.$db-transition-duration-fast
						variables.$db-transition-timing-emotional,
					block-size variables.$db-transition-duration-fast
						variables.$db-transition-timing-emotional,
					transform variables.$db-transition-duration-fast
						variables.$db-transition-timing-emotional;
			}
		}

		/* positioned at the end of the track: track length - 100% (thumb width) */
		&:checked {
			--thumb-offset-x: calc(100% + #{$switch-fixed-padding});

			@include colors.set-current-colors(
				colors.$db-adaptive-bg-inverted-contrast-max-default,
				colors.$db-adaptive-on-bg-inverted-default,
				colors.$db-adaptive-bg-inverted-contrast-max-hovered,
				colors.$db-adaptive-bg-inverted-contrast-max-pressed
			);

			border-color: colors.$db-adaptive-on-bg-basic-emphasis-100-default;

			@include helpers.hover {
				border-color: colors.$db-adaptive-on-bg-basic-emphasis-100-hovered;
			}

			@include helpers.active {
				border-color: colors.$db-adaptive-on-bg-basic-emphasis-100-pressed;
			}

			&::after {
				--db-icon-color: #{colors.$db-adaptive-on-bg-inverted-default};
			}

			&::before {
				block-size: $switch-active-thumb-size;
				background-color: colors.$db-adaptive-on-bg-inverted-default;
				color: colors.$db-adaptive-on-bg-inverted-default;
				margin: 0;
			}
		}

		&:focus-visible {
			// Overwrite default border-radius
			border-radius: variables.$db-border-radius-full;
		}

		&[data-aid-icon]:not(:checked)::after {
			--db-icon-trailing: attr(data-aid-icon);
		}

		&[data-aid-icon-trailing]:checked::after {
			--db-icon-trailing: attr(data-aid-icon-trailing);
		}

		@media screen and (prefers-reduced-motion: no-preference) {
			// Overwrite default transition for switch border
			transition: none;
		}
	}

	&[data-hide-label="true"] {
		gap: 0;
	}

	&[data-size="small"] {
		gap: variables.$db-spacing-fixed-2xs;

		> input {
			@extend %db-overwrite-font-size-xs;
		}
	}

	&[data-emphasis="strong"] {
		> input {
			--db-check-element-border-color: #{colors.$db-adaptive-bg-basic-transparent-full-default};

			@extend %db-critical-variables;

			background-color: colors.$db-adaptive-bg-inverted-contrast-low-default;
			color: colors.$db-adaptive-on-bg-inverted-default;
			border-color: colors.$db-adaptive-on-bg-basic-emphasis-70-default;

			@include helpers.hover {
				background-color: colors.$db-adaptive-bg-inverted-contrast-low-hovered;
				border-color: colors.$db-adaptive-on-bg-basic-emphasis-70-hovered;
			}

			@include helpers.active {
				background-color: colors.$db-adaptive-bg-inverted-contrast-low-pressed;
				border-color: colors.$db-adaptive-on-bg-basic-emphasis-70-pressed;

				&::before {
					block-size: $checked-active-transition-size;
				}
			}

			&:not(:checked) {
				--thumb-offset-x: 0;
			}

			&:checked {
				@extend %db-successful-variables;

				&::before {
					background-color: colors.$db-adaptive-on-bg-inverted-default;
					color: colors.$db-adaptive-on-bg-inverted-default;
				}

				&::after {
					--db-icon-color: #{colors.$db-adaptive-on-bg-inverted-default};
				}
			}

			&::after {
				--db-icon-color: #{colors.$db-adaptive-on-bg-inverted-default};
			}

			&::before {
				background-color: colors.$db-adaptive-on-bg-inverted-default;
				color: colors.$db-adaptive-on-bg-inverted-default;
				block-size: $switch-active-thumb-size;
				margin: 0;
			}
		}
	}

	&[data-emphasis="strong"],
	&[data-visual-aid="true"] {
		> input {
			&::after {
				visibility: visible;
				block-size: $switch-active-thumb-size;
			}

			&:checked {
				&:not([data-aid-icon]) {
					@include icons.set-icon("check", "after");
				}

				&::after {
					transform: translateX(
						calc(-100% - #{$switch-fixed-padding})
					);
					block-size: $switch-active-thumb-size;
				}
			}
		}
	}

	/* Set variables */
	&[data-custom-validity="valid"] {
		--db-switch-label-color: #{colors.$db-successful-on-bg-basic-emphasis-70-default};
	}
	&[data-custom-validity="invalid"] {
		--db-switch-label-color: #{colors.$db-critical-on-bg-basic-emphasis-70-default};
	}

	/* Set color for label */
	> .db-switch-label,
	> .db-switch-label * {
		color: var(--db-switch-label-color, inherit);
	}

	/* Set color for helper message */
	&::after {
		color: var(
			--db-switch-label-color,
			var(--db-check-element-label-color, inherit)
		);
	}

	/* Put infotext below switch */
	& :is(.db-infotext, db-infotext) {
		order: 2;
		flex: 0 0 100%;
		margin-block-start: variables.$db-spacing-fixed-2xs;
	}

	@include switch-validity(
		"valid",
		var(--db-successful-on-bg-basic-emphasis-100-default),
		var(--db-successful-on-bg-basic-emphasis-70-default)
	);
	@include switch-validity(
		"invalid",
		var(--db-critical-on-bg-basic-emphasis-100-default),
		var(--db-critical-on-bg-basic-emphasis-70-default)
	);

	/* Label position (leading/trailing) */
	&[data-label-position="trailing"] {
		> input {
			margin-inline-end: variables.$db-spacing-fixed-xs;
		}
	}

	&[data-label-position="leading"] {
		> .db-switch-label {
			order: -1;
			margin-inline-end: variables.$db-spacing-fixed-xs;
		}

		> input {
			margin-inline-end: 0;
		}
	}

	/* Accent styling for checked switch */
	&[data-accent="true"] {
		> input:checked {
			background-color: colors.$db-successful-on-bg-basic-emphasis-70-default;
			border-color: colors.$db-successful-on-bg-basic-emphasis-70-default;

			@include helpers.hover {
				background-color: colors.$db-successful-on-bg-basic-emphasis-70-default;
				border-color: colors.$db-successful-on-bg-basic-emphasis-70-default;
			}

			@include helpers.active {
				background-color: colors.$db-successful-on-bg-basic-emphasis-70-default;
				border-color: colors.$db-successful-on-bg-basic-emphasis-70-default;
			}

			&::before {
				background-color: colors.$db-successful-on-bg-inverted-default;
				color: colors.$db-successful-on-bg-inverted-default;
			}
		}
	}
}
