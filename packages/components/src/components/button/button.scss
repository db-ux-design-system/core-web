@charset "utf-8";
@use "@db-ui/foundations/build/scss/tonality";
@use "@db-ui/foundations/build/scss/variables";
@use "@db-ui/foundations/build/scss/colors";
@use "@db-ui/foundations/build/scss/icons";
@use "../../styles/component";
@use "../../styles/button-components";

.db-button {
	@extend %default-interactive-component;
	@extend %default-button;

	@include colors.bg-transparent-interactive();

	color: colors.$db-base-on-bg;

	block-size: variables.$db-sizing-md;
	inline-size: fit-content;
	padding: variables.$db-spacing-fixed-xs variables.$db-spacing-fixed-md;

	// Square icon only buttons
	&.is-icon-text-replace {
		font-size: 0;
		padding: 0;
		inline-size: variables.$db-sizing-md;
	}

	&[data-size="small"] {
		@extend %db-overwrite-font-size-sm;
		block-size: variables.$db-sizing-sm;

		&:not(.is-icon-text-replace) {
			padding: variables.$db-spacing-fixed-3xs
				variables.$db-spacing-fixed-sm;

			&::before {
				margin-inline-end: variables.$db-spacing-fixed-2xs;
			}
		}

		// Square icon only buttons
		&.is-icon-text-replace {
			inline-size: variables.$db-sizing-sm;
		}
	}

	&[data-width="full"] {
		inline-size: 100%;
	}

	&[data-variant="primary"] {
		@extend %db-brand-component-interactive;
		@extend %transparent-border;
		background-color: colors.$db-brand;
		color: colors.$db-brand-on;

		&:hover {
			background-color: colors.$db-brand-hover;
		}

		&:active {
			background-color: colors.$db-brand-pressed;
		}
	}

	&[data-variant="solid"] {
		@extend %transparent-border;
		@include colors.get-variant-bg-color(0.08);
	}

	&[data-variant="text"] {
		@extend %transparent-border;
	}

	&:disabled {
		opacity: component.$default-disabled-opacity;
	}

	// States (currently only "loading")
	&[data-state="loading"] {
		@include icons.is-icon-text-replace();

		&::before {
			content: "";
		}
	}

	&[data-state="loading"] {
		font-size: 0;
	}
}
