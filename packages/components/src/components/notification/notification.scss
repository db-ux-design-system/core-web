@use "sass:map";
@use "@db-ux/core-foundations/build/styles/density";
@use "@db-ux/core-foundations/build/styles/variables";
@use "@db-ux/core-foundations/build/styles/helpers/display";
@use "@db-ux/core-foundations/build/styles/colors";
@use "@db-ux/core-foundations/build/styles/icons";
@use "@db-ux/core-foundations/build/styles/screen-sizes";
@use "../../styles/internal/component";
@use "../../styles/internal/link-components";
@use "./notification-grid-default";
@use "./notification-grid-overlay";
@use "./notification-grid-non-overlay";
@use "./notification-grid-layout-link-variant-inline";

%ugly-line-height-workarounds {
	// resets line-height to smaller height based on timestamp
	&:has(span) {
		header,
		p,
		&::before,
		.db-button {
			/* stylelint-disable-next-line db-ux/use-spacings */
			margin-block-start: -2px;
		}
	}
}

.db-notification {
	@extend %component-border;
	@extend %grid-layout-default;
	@extend %grid-layout-link-variant-inline;
	@extend %ugly-line-height-workarounds;
	@include display.display(grid);

	padding: variables.$db-spacing-fixed-md;
	gap: variables.$db-spacing-fixed-xs variables.$db-spacing-fixed-md;
	inline-size: inherit;
	background-color: colors.$db-adaptive-bg-basic-level-2-default;

	&::before {
		--db-icon-color: #{colors.$db-adaptive-on-bg-basic-emphasis-70-default};
	}

	a {
		@extend %db-default-link;

		grid-area: link;
		white-space: nowrap;

		// Overwrite settings for db-link ALWAYS
		&::before,
		&::after {
			content: none !important;
			margin: 0 !important;
		}

		&[data-variant="brand"] {
			@extend %db-link-default-color;
		}

		&[data-size="small"] {
			@extend %db-overwrite-font-size-md;
		}
	}

	// headline
	header {
		grid-area: head;

		&,
		h1,
		h2,
		h3,
		h4,
		h5,
		h6 {
			margin: 0;
			font: var(--db-type-body-md);
			font-weight: 700;

			&::before,
			&::after {
				--db-icon-font-size: var(--db-base-body-icon-font-size-md);
				--db-icon-font-weight: var(--db-base-body-icon-weight-md);
			}
		}
	}

	// content
	p {
		@extend %db-overwrite-font-size-md;

		grid-area: content;
		margin: 0;
	}

	img {
		min-block-size: variables.$db-sizing-md;
		min-inline-size: variables.$db-sizing-md;
		max-block-size: variables.$db-sizing-md;
		max-inline-size: variables.$db-sizing-md;
		border-radius: variables.$db-border-radius-xs;
	}

	// timestamp
	span {
		@extend %db-overwrite-font-size-sm;

		grid-area: timestamp;
		white-space: nowrap;
	}

	.db-button {
		grid-area: close;
	}

	&:has(img) {
		// we don't show a icon if we have an image
		::before {
			content: none !important;
		}
	}

	&[data-icon]::before,
	&::before,
	img {
		--db-icon-margin-end: 0;

		@include icons.to-filled-icon;

		grid-area: icon;
	}

	&[data-variant="overlay"] {
		@extend %grid-layout-variant-overlay;

		box-shadow: variables.$db-elevation-md;
	}

	&[data-link-variant="block"] {
		@extend %grid-layout-variant-not-overlay;
	}

	&[data-variant="overlay"],
	&[data-variant="standalone"] {
		@extend %default-card;
	}

	@each $name in colors.$variant-colors {
		&[data-semantic="#{$name}"] {
			@extend %db-#{$name}-variables;
			@include icons.variant-icons($name);

			&::before {
				@extend %icon;
			}
		}
	}
}
