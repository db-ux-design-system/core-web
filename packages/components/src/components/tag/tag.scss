@use "sass:map";
@use "@db-ui/foundations/build/scss/animation";
@use "@db-ui/foundations/build/scss/variables";
@use "@db-ui/foundations/build/scss/tonality";
@use "@db-ui/foundations/build/scss/icons";
@use "@db-ui/foundations/build/scss/helpers";
@use "@db-ui/foundations/build/scss/colors";
@use "../../styles/button-components";
@use "../../styles/tag-components";
@use "../../styles/icon-passing";
@use "../../styles/component";

%no-text {
	&[data-no-text="true"] {
		--icon-margin-after: 0;
		@include icons.is-icon-text-replace();
		padding: 0;

		label {
			@include icons.is-icon-text-replace();
		}
	}

	&:not([data-no-text="true"]) {
		padding-inline: variables.$db-spacing-fixed-2xs;

		&:has(.db-tab-remove-button) {
			padding-inline-end: 0;
		}

		&:has(dbbutton):has(dbbutton:not(.db-tab-remove-button)),
		&:has(db-button):has(db-button:not(.db-tab-remove-button)),
		&:not(:has(dbbutton)):has(button:not(.db-tab-remove-button)),
		&:has(a),
		&:has(label) {
			padding-inline: 0;
		}
	}
}

%db-tag {
	--db-icon-margin-end: #{variables.$db-spacing-fixed-2xs};
	@extend %default-interactive-component;
	@extend %db-overwrite-font-size-sm;
	@extend %default-button;
	@extend %no-text;

	padding-block: 0;
	block-size: variables.$db-sizing-sm;
	min-inline-size: variables.$db-sizing-sm;
	inline-size: fit-content;
	position: relative;

	&:not(:has(#{tag-components.$interactive-selectors})),
	&:has(.db-tab-remove-button) {
		@extend %component-border;
		@include tag-components.get-tag-colors();
	}

	&:has(#{tag-components.$interactive-selectors}) {
		@include icon-passing.icon-passing(variables.$db-spacing-fixed-2xs);
		@include tag-components.get-tag-colors-interactive();
	}

	button:nth-of-type(2),
	dbbutton:nth-of-type(2),
	&:has(db-button):has(dbbutton) .db-tab-remove-button {
		display: none;
	}
}

.db-tag {
	@extend %db-tag;
	position: relative;

	label {
		@extend %default-transition;
		inline-size: 100%;
		margin-inline-start: 0;

		&:has(input:not(:checked)) {
			--db-current-base-color-alpha: 100%;
		}

		&:has(input:checked) {
			border-width: variables.$db-border-height-sm;

			&::before {
				content: none;
			}
		}

		input {
			display: none;
		}
	}

	a {
		@extend %default-transition;
		@include colors.bg-transparent-interactive(false);
		display: inline-flex;
		text-decoration: none;

		&::after {
			--db-icon-margin-start: 0;
			content: "" !important;
		}
	}

	.db-link {
		&:hover,
		&:active {
			color: inherit;
		}
	}

	&:not(:has(dbbutton, db-button)):has(button:not(.db-tab-remove-button)),
	&:has(:is(dbbutton, db-button):not(.db-tab-remove-button), a, label) {
		border: none;
	}

	input:checked {
		@include colors.bg-transparent-hover();
	}

	button {
		@include colors.bg-transparent-interactive();
	}

	button,
	label:has(input:checked) {
		@include colors.bg-transparent-interactive();
		@include colors.get-variant-bg-color(0.08);
	}

	&:not([data-emphasis="strong"]) {
		label:has(input[type="radio"]:checked) {
			&:enabled {
				&:hover,
				&:active {
					--db-current-base-color-alpha: 92%;
				}
			}
		}
	}

	button,
	a,
	label {
		@extend %db-overwrite-font-size-sm;
		@extend %component-border;
		block-size: inherit;
		padding: 0 variables.$db-spacing-fixed-2xs;
		border-radius: variables.$db-border-radius-md;
	}

	button,
	a {
		@include colors.get-variant-bg-color(0.08);
	}

	db-button,
	dbbutton,
	db-checkbox,
	dbcheckbox,
	db-radio,
	dbradio,
	db-link,
	dblink {
		// angular workaround
		block-size: inherit;
	}

	&[data-disabled="true"] {
		opacity: variables.$db-opacity-sm;
		pointer-events: none;
	}

	&[data-overflow="true"] {
		max-inline-size: variables.$db-sizing-2xl;

		& > * {
			inline-size: 100%;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
		}
	}

	.db-tab-remove-button {
		&:is(button),
		button {
			@include colors.get-variant-bg-color(0);
			margin-inline-start: variables.$db-spacing-fixed-2xs;
			block-size: 100%;
		}
	}
}
