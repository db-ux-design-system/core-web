@use "sass:map";
@use "@db-ux/core-foundations/build/styles/animation";
@use "@db-ux/core-foundations/build/styles/variables";
@use "@db-ux/core-foundations/build/styles/fonts";
@use "@db-ux/core-foundations/build/styles/icons";
@use "@db-ux/core-foundations/build/styles/helpers";
@use "@db-ux/core-foundations/build/styles/colors";
@use "../../styles/internal/button-components";
@use "../../styles/internal/tag-components";
@use "../../styles/internal/icon-passing";
@use "../../styles/internal/component";
@use "@db-ux/core-foundations/build/styles/materials/classes/all";
@use "@db-ux/core-foundations/build/styles/texts/classes/all" as texts;

%no-text {
	&[data-no-text="true"] {
		--icon-margin-after: 0;

		@include icons.is-icon-text-replace;

		padding: 0;
		gap: 0;

		label {
			@include icons.is-icon-text-replace;
		}
	}

	&:not([data-no-text="true"]) {
		padding-inline: variables.$db-spacing-fixed-2xs;

		&:has(.db-tab-remove-button) {
			padding-inline-end: 0;
		}
	}
}

%db-tag {
	--db-icon-margin-end: 0;

	@extend %db-overwrite-font-size-sm;
	@extend %default-button;
	@extend %no-text;

	padding-block: 0;
	block-size: variables.$db-sizing-sm;
	min-inline-size: variables.$db-sizing-sm;
	inline-size: fit-content;
	position: relative;
	gap: variables.$db-spacing-fixed-2xs;

	@each $name in colors.$variant-colors {
		&[data-semantic="#{$name}"] {
			@extend %db-#{$name}-variables;
		}
	}

	&:not([data-emphasis="strong"], :has(input:checked)) {
		&:not([data-text]) {
			@extend [data-text="vibrant"];

			.db-tab-remove-button,
			.db-button,
			.db-link,
			.db-checkbox,
			.db-radio {
				@extend [data-text="vibrant"];
			}
		}
	}

	&[data-emphasis="strong"] {
		&:not([data-material]) {
			@extend [data-material="vibrant"];
		}
	}

	&:not(:has(#{tag-components.$interactive-selectors})),
	&:has(.db-tab-remove-button) {
		@extend %default-component;
	}

	&:has(#{tag-components.$interactive-selectors}) {
		--db-icon-margin-end: #{variables.$db-spacing-fixed-2xs};

		@extend %default-interactive-component;

		@include icon-passing.icon-passing(variables.$db-spacing-fixed-2xs);

		#{tag-components.$interactive-selectors},
		input {
			text-decoration: unset;
			margin: unset;
			border: unset;
			background-color: transparent;
			padding: unset;
			font: inherit;
			appearance: none;
			transition: none;

			&::after {
				content: none !important;
			}
		}
	}

	@media (forced-colors: active) {
		&:not(:has(input:checked)) {
			border-style: dashed;
		}
	}

	&:has(input:checked) {
		@extend %default-swap-component;
	}
}

.db-tag {
	@extend %db-tag;

	&[data-show-check-state="true"] {
		label {
			--db-icon-margin-start: #{variables.$db-spacing-fixed-2xs};

			@include icons.set-icon("circle", "after");

			/* TODO: maybe we could get rid of an expensive :has selector by defining this icon on the input itself */
			&:has(input:checked) {
				@include icons.set-icon("check_circle", "after");
			}
		}
	}

	a,
	label {
		@include helpers.display(inline-flex);

		align-items: center;
	}

	input {
		@extend %a11y-visually-hidden;
	}

	&:has(:disabled),
	&[data-disabled="true"] {
		opacity: variables.$db-opacity-md;
		pointer-events: none;
	}

	&[data-overflow="true"] {
		max-inline-size: variables.$db-sizing-2xl;

		> * {
			inline-size: 100%;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
		}
	}

	.db-tab-remove-button {
		@extend [data-material="transparent"];
	}
}
