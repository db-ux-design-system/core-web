@use "sass:map";
@use "@db-ui/foundations/build/scss/variables.global" as var;
@use "@db-ui/foundations/build/scss/helpers/component" as component;
@use "@db-ui/foundations/build/scss/helpers/font" as font;
@use "@db-ui/foundations/build/scss/icon/icons.helpers" as icons;
@use "../../styles/button-components" as button-components;
@use "../../styles/tag-components" as tag-components;
@use "@db-ui/foundations/build/scss/helpers/functions" as functions;


@mixin interactive {
	&:has(input, button:not(.db-tab-remove-button), a) {
		@content;
	}
}

%no-text {
	&[data-no-text="true"] {
		--icon-margin-after: 0;
		@include icons.is-icon-text-replace();
		padding: 0;

		label,
		span {
			@include icons.is-icon-text-replace();
		}
	}

	&:not(&[data-no-text="true"]) {
		padding-inline: var.$db-spacing-fixed-2xs;

		&:has(.db-tab-remove-button) {
			padding-inline-end: 0;
		}
	}
}

.db-tag {
	@extend %no-text;
	@extend %default-interactive-component;
	@extend %component-border;
	@extend %db-overwrite-font-size-sm;
	@extend %default-button;

	padding-block: 0;
	block-size: var.$db-sizing-sm;
	min-inline-size: var.$db-sizing-sm;
	inline-size: fit-content;

	display: flex;

	&:not(&[data-interactive="true"]) {
		@include tag-components.get-tag-colors();
	}

	&[data-interactive="true"] {
		@include tag-components.get-tag-colors-interactive();
	}

	&:has(input) {
		position: relative;
	}

	input {
		appearance: none;
		border: none;
		inline-size: 100%;
		block-size: 100%;
		position: absolute;

		// Resetting regular DBCheckbox and DBRadio styling
		&:hover,
		&:checked,
		&:active {
			background: none !important;
		}

		&:checked {
			&::before {
				content: none;
			}
		}
	}

	label,
	span {
		@extend %db-overwrite-font-size-sm;
		margin-inline-start: 0;
	}

	button {
		border: none;
		block-size: auto;
		padding: 0;
		background-color: none;
	}

	a {
		// display: inline-flex;
		text-decoration: none;

		&::after {
			content: "" !important;
		}
	}

	&[data-overflow="true"] {
		max-inline-size: var.$db-sizing-2xl;
		text-overflow: ellipsis;
		overflow: hidden;
	}

	&[data-disabled="true"] {
		opacity: component.$default-disabled-opacity;
		pointer-events: none;
	}

	.db-button[data-size="small"] {
		border-radius: functions.to-rem(3);
		block-size: 100%;
	}

	.db-tab-remove-button {
		&:is(button),
		button {
			block-size: 100%;
		}
	}
}
