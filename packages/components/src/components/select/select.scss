@use "sass:map";
@use "@db-ui/foundations/build/scss/default.assets-paths" as *;
@use "@db-ui/foundations/build/scss/variables" as *;
@use "@db-ui/foundations/build/scss/variables.global" as *;
@use "@db-ui/foundations/build/scss/color-placeholder" as *;
@use "@db-ui/foundations/build/scss/helpers/functions" as *;
@use "@db-ui/foundations/build/scss/helpers/component";
@use "@db-ui/foundations/build/scss/color/color-variants" as *;
@use "@db-ui/foundations/build/scss/icon/icons.helpers" as *;
@use "@db-ui/foundations/build/scss/body-styles" as *;
@use "../../styles/form-components" as *;

%select-icon {
	@extend %dropdown-icon;

	&::after {
		right: $db-spacing-fixed-sm;
	}

	&:has(select:focus-within) {
		&::after {
			transform: rotate(180deg);
		}
	}
}

%select-label {
	@extend %db-body-md;
	top: calc(
		($db-sizing-md - var(--db-base-font-size) * var(--db-base-line-height)) /
			2
	);
}

.db-select {
	--has-before: 0;
	--has-status: 0;
	@extend %db-body-sm;
	@extend %select-icon;
	@extend %bg-transparent-hover;
	@extend %default-interactive-component;
	@extend %component-border;
	@include get-variant-bg-color(0.08);

	position: relative;
	height: $db-sizing-md;
	min-width: calc(
		var(--db-select-min-width, calc(3 * $db-sizing-md)) + var(--has-before) *
			($db-sizing-md) + var(--has-status) * ($db-sizing-md)
	);

	&[data-icon] {
		--has-before: 1;
	}

	&[data-variant]:not([data-variant="adaptive"]) {
		--has-status: 1;
	}

	select {
		@extend %transparent-border;
		@extend %default-border-radius;
		appearance: none;
		background-color: transparent;
		border: none;
		height: $db-sizing-md;
		text-overflow: ellipsis;
		text-indent: calc(
			var(--has-before) * ($db-sizing-md - $db-spacing-fixed-sm)
		);
		width: 100%;
		padding-block-start: $db-spacing-fixed-sm;
		padding-inline-start: $db-spacing-fixed-sm;
		padding-inline-end: calc(
			$db-sizing-md + var(--has-status) * ($db-sizing-md)
		);

		&:not([data-value]) {
			& ~ label {
				@extend %select-label;
			}
		}
	}

	&::after,
	&::before,
	label,
	.icon-state {
		position: absolute;
		pointer-events: none;
	}

	&:has(select:disabled) {
		// Decided against cursor: not-allowed, compare to e.g. https://phabricator.wikimedia.org/T121960
		opacity: 0.25;
		pointer-events: none;
	}

	label {
		@extend %db-body-2xs;
		top: $db-spacing-fixed-2xs;
		transition: left, top, font-size 0.2s $db-transition-functional-timing;
		left: calc(
			var(--has-before) * ($db-sizing-md - $db-spacing-fixed-sm) +
				$db-spacing-fixed-sm
		);
	}

	&::after,
	&::before,
	.icon-state {
		top: calc(var(--db-base-font-size) * var(--db-base-line-height) / 2);
	}

	&::before {
		left: $db-spacing-fixed-sm;
	}

	.icon-state {
		@extend %db-body-sm;

		display: flex;
		right: calc($db-sizing-md - $db-spacing-fixed-xs);

		&::before {
			--icon-font-family: var(--db-base-icon-font-family-filled);
			--icon-font-size: var(--db-base-icon-font-size);
		}

		// angular specific nesting

		.db-icon {
			@extend %db-body-sm;

			&::before {
				--icon-font-family: var(--db-base-icon-font-family-filled);
				--icon-font-size: var(--db-base-icon-font-size);
			}
		}
	}

	& ~ .description {
		@extend %db-body-xs;
		margin-inline: $db-spacing-fixed-sm;
		margin-block: $db-spacing-fixed-2xs 0;
	}

	@each $name, $colors in $component-variants {
		&[data-variant="#{$name}"] {
			--db-current-border-color: #{map.get($colors, "border")};
			color: map.get($colors, "on-bg");

			@if ($name == "critical") {
				@extend %adaptive-critical-component;
			} @else if ($name == "informational") {
				@extend %adaptive-informational-component;
			} @else if ($name == "warning") {
				@extend %adaptive-warning-component;
			} @else if ($name == "successful") {
				@extend %adaptive-successful-component;
			}

			& ~ .description,
			.icon-state,
			.icon-state .db-icon {
				color: map.get($colors, "element");
			}
		}
	}
}
