@use "sass:map";
@use "component";
@use "@db-ui/foundations/build/scss/variables";
@use "@db-ui/foundations/build/scss/colors";

$interactive-selectors: "label, button:not(.db-tab-remove-button), a";

@mixin get-tag-colors() {
	@extend %db-bg-base-strong;

	&[data-emphasis="strong"] {
		@extend %db-base-component;
	}

	@each $name, $colors in colors.$component-variants {
		&[data-variant="#{$name}"] {
			@if ($name == "neutral") {
				@extend %db-bg-neutral;

				&[data-emphasis="strong"] {
					@extend %db-neutral-component;
				}
			} @else if ($name == "critical") {
				@extend %db-bg-critical;

				&[data-emphasis="strong"] {
					@extend %db-critical-component;
				}
			} @else if ($name == "informational") {
				@extend %db-bg-informational;

				&[data-emphasis="strong"] {
					@extend %db-informational-component;
				}
			} @else if ($name == "warning") {
				@extend %db-bg-warning;

				&[data-emphasis="strong"] {
					@extend %db-warning-component;
				}
			} @else if ($name == "successful") {
				@extend %db-bg-successful;

				&[data-emphasis="strong"] {
					@extend %db-successful-component;
				}
			}

			&:not(&[data-emphasis="strong"]) {
				--db-current-border-color: #{map.get($colors, "border")};
			}
		}
	}
}

@mixin interactive-selectors() {
	&:not(:has(dbbutton)) button:not(.db-tab-remove-button),
	dbbutton:not(.db-tab-remove-button) > button,
	db-button > button,
	a,
	label:has(input[type="checkbox"]:checked) {
		@content;
	}
}

@mixin get-tag-colors-interactive() {
	@include interactive-selectors() {
		@extend %db-bg-base-strong-interactive;
	}

	label:has(input[type="radio"]:checked) {
		@extend %db-bg-base-strong-interactive;
	}

	@each $name, $colors in colors.$component-variants {
		&[data-variant="#{$name}"] {
			@include interactive-selectors() {
				@if ($name == "neutral") {
					@extend %db-bg-neutral-interactive;
				} @else if ($name == "critical") {
					@extend %db-bg-critical-interactive;
				} @else if ($name == "informational") {
					@extend %db-bg-informational-interactive;
				} @else if ($name == "warning") {
					@extend %db-bg-warning-interactive;
				} @else if ($name == "successful") {
					@extend %db-bg-successful-interactive;
				}
			}
		}
	}

	&[data-emphasis="strong"] {
		@include interactive-selectors() {
			@extend %db-base-component-interactive;
		}

		label:has(input[type="radio"]:checked) {
			@extend %db-base-component;
		}

		&:has(input:checked, a, button) {
			--db-current-icon-color: var(--db-base-on-enabled);
			--db-current-color: var(--db-base-on-enabled);
			color: var(--db-current-color);
		}

		@each $name, $colors in colors.$component-variants {
			&[data-variant="#{$name}"] {
				@include interactive-selectors() {
					@if ($name == "neutral") {
						@extend %db-neutral-component-interactive;
					} @else if ($name == "critical") {
						@extend %db-critical-component-interactive;
					} @else if ($name == "informational") {
						@extend %db-informational-component-interactive;
					} @else if ($name == "warning") {
						@extend %db-warning-component-interactive;
					} @else if ($name == "successful") {
						@extend %db-successful-component-interactive;
					}
				}
			}
		}
	}
}
