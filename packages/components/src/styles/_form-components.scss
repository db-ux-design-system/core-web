@use "sass:map";
@use "@db-ui/foundations/build/scss/icon/icon-helpers";
@use "@db-ui/foundations/build/scss/helpers/font";
@use "@db-ui/foundations/build/scss/variables";
@use "@db-ui/foundations/build/scss/helpers/component";
@use "@db-ui/foundations/build/scss/color/color-variants";

$dropdown-icon-transition: transform variables.$db-transition-emotional-straight;
$dropdown-icon-transform: rotate(-180deg);

$font-size-height: calc(var(--db-base-font-size) * var(--db-base-line-height));
$icon-size-sm: var(--db-base-icon-font-size-sm);
$label-size-height-sm: calc(
	var(--db-type-body-font-size-sm) * var(--db-type-body-line-height-sm)
);
$label-size-height-xs: calc(
	var(--db-type-body-font-size-xs) * var(--db-type-body-line-height-xs)
);
$label-size-height-2xs: calc(
	var(--db-type-body-font-size-2xs) * var(--db-type-body-line-height-2xs)
);

$floating-label-size: calc(
	#{variables.$db-spacing-fixed-3xs} + #{variables.$db-spacing-fixed-2xs} + #{$label-size-height-2xs}
);

%dropdown-icon {
	@include icon-helpers.icon("expand_more", "after");

	&::after {
		transition: $dropdown-icon-transition;
	}
}

@mixin placeholder-content() {
	&::placeholder,
	& + [id$="-placeholder"] {
		@content;
	}
}

@mixin set-floating-label-overwrites($selector) {
	&[data-label-variant="floating"] {
		label {
			@extend %db-overwrite-font-size-md;
			position: absolute;
			z-index: 2;
			inset-block-start: calc(
				(#{variables.$db-sizing-md} - #{$font-size-height}) / 2
			);
			inset-inline: #{variables.$db-spacing-fixed-sm};
		}

		// icons
		&::after,
		&::before {
			inset-block-start: calc(
				#{variables.$db-sizing-md} / 2 - #{$font-size-height} / 2
			);
		}

		[id$="-placeholder"] {
			@extend %db-overwrite-font-size-sm;
			inset-block-start: calc(
				50% - 0.5em + #{variables.$db-spacing-fixed-3xs}
			);
		}

		#{$selector} {
			@extend %db-overwrite-font-size-sm;
			@include placeholder-content() {
				transition: none;
				opacity: 0;
			}

			@if ($selector == textarea) {
				padding-block-start: $floating-label-size;
			} @else {
				// font-size label which is 2xs + smallest spacing
				padding-block-start: calc(
					var(--db-type-body-font-size-2xs) +
						#{variables.$db-spacing-fixed-3xs}
				);
			}
		}

		&:has(#{$selector}:focus-within),
		&:has(#{$selector}:is(input, textarea):not(:placeholder-shown)),
		&:has(> select option:checked:not([hidden])) {
			label {
				@extend %db-overwrite-font-size-2xs;
				inset-block-start: variables.$db-spacing-fixed-2xs;
			}

			#{$selector} {
				@include placeholder-content() {
					transition: opacity
						variables.$db-transition-emotional-straight;
					opacity: component.$default-placeholder-opacity;
				}
			}
		}
	}
}

@mixin set-current-colors($color-variant) {
	--db-current-color: #{map.get($color-variant, "on-bg")};
	--db-current-border-weak-color: #{map.get($color-variant, "border")};
	--db-current-element-color: #{map.get($color-variant, "element")};
	--db-current-base-color: #{map.get($color-variant, "primary")};
	--db-current-bg-color: #{map.get($color-variant, "bg")};
}

@mixin get-validity-color($key: "valid") {
	$variant: "successful";

	@if ($key != "valid") {
		$variant: "critical";
	}

	$color-variant: map.get(color-variants.$component-variants, $variant);

	& {
		@include set-current-colors($color-variant);
	}

	textarea,
	input,
	select,
	[id$="-placeholder"] {
		color: map.get($color-variant, "on-bg");
	}
}

@mixin get-validity($key: "valid") {
	$boolean: "true";
	&:has(input:user-#{$key}),
	&:has(textarea:user-#{$key}),
	&:has(select:user-#{$key}) {
		@include get-validity-color($key);
	}

	&:has(input[aria-invalid="#{$boolean}"]),
	&:has(textarea[aria-invalid="#{$boolean}"]),
	&:has(select[aria-invalid="#{$boolean}"]) {
		@include get-validity-color($key);
	}

	// :user-valid workaround
	@supports not selector(:user-#{$key}) {
		&:has(input:required:#{$key}),
		&:has(textarea:required:#{$key}),
		&:has(select:required:#{$key}) {
			@include get-validity-color($key);
		}
	}
	@if ($key == "valid") {
		$boolean: "false";
	}
}

@mixin set-default-form-component($selector) {
	--db-form-has-before: 0;
	@extend %db-overwrite-font-size-sm;

	@include set-floating-label-overwrites($selector);
	@include get-validity();
	@include get-validity("invalid");

	// colors
	@each $name, $colors in color-variants.$component-variants {
		&[data-variant="#{$name}"] {
			@include set-current-colors($colors);
		}

		&[data-variant="#{$name}"] #{$selector},
		&[data-variant="#{$name}"] [id$="-placeholder"] {
			color: map.get($colors, "on-bg");
		}
	}

	// we use absolute icons
	position: relative;
	display: flex;
	flex-direction: column;

	#{$selector} {
		@extend %db-overwrite-font-size-md;
		@extend %default-interactive-component;
		@extend %component-border;

		@include color-variants.bg-transparent-hover();
		@include color-variants.get-variant-bg-color(0.08);

		appearance: none;
		max-inline-size: 100%;
		inline-size: 100%;
		padding-inline: var(
				--db-form-component-padding-inline-start,
				#{variables.$db-spacing-fixed-sm}
			)
			var(
				--db-form-component-padding-inline-end,
				#{variables.$db-spacing-fixed-sm}
			);

		@include placeholder-content() {
			opacity: component.$default-placeholder-opacity;
		}

		&:is(input, textarea):read-only {
			background-color: variables.$db-colors-neutral-bg !important;
		}
	}

	@if ($selector == input or $selector == select) {
		#{$selector} {
			block-size: variables.$db-sizing-md;
			text-overflow: ellipsis;
		}
	}

	// label
	label {
		@extend %db-overwrite-font-size-xs;
		padding-block-end: variables.$db-spacing-fixed-xs;
		pointer-events: none;
		cursor: text;
		opacity: component.$default-label-opacity;

		transition: font-size variables.$db-transition-emotional-straight;
		max-inline-size: 25ch;
		text-overflow: ellipsis;
		white-space: nowrap;
		overflow: hidden;
	}

	// Helper message
	& .db-infotext {
		margin-block-start: variables.$db-spacing-fixed-2xs;
	}

	// disabled
	&:has(#{$selector}:disabled) {
		// Decided against cursor: not-allowed, compare to e.g. https://phabricator.wikimedia.org/T121960
		opacity: component.$default-disabled-opacity;
		pointer-events: none;
	}

	// required label

	&:has(#{$selector}:required) {
		label {
			&::after {
				content: "*";
				padding-inline-start: variables.$db-spacing-fixed-2xs;
			}
		}
	}

	// icons
	&::after,
	&::before {
		position: absolute;
		pointer-events: none;
		// 1px for border
		inset-block-start: calc(
			#{variables.$db-sizing-md} / 2 + #{$label-size-height-xs} - 1px
		);
	}

	&::before {
		margin-inline-end: variables.$db-spacing-fixed-sm;
		inset-inline-start: variables.$db-spacing-fixed-sm;
	}

	&::after {
		margin-inline-start: variables.$db-spacing-fixed-sm;
		inset-inline-end: variables.$db-spacing-fixed-sm;
	}
}

// CHECKBOX & RADIO

%required-form-element-check {
	:required + & {
		&::after {
			content: "*";
			padding-inline-start: variables.$db-spacing-fixed-2xs;
		}
	}
}
