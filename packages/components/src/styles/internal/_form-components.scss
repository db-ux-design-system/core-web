@use "sass:map";
@use "sass:string";
@use "@db-ux/core-foundations/build/styles/icons";
@use "@db-ux/core-foundations/build/styles/fonts";
@use "@db-ux/core-foundations/build/styles/variables";
@use "@db-ux/core-foundations/build/styles/colors";
@use "@db-ux/core-foundations/build/styles/helpers";
@use "component";

@forward "../visually-hidden";

$dropdown-icon-transition: transform variables.$db-transition-straight-emotional;
$dropdown-icon-transform: rotate(-180deg);

$font-size-height: var(--db-icon-font-size);
$icon-size-sm: var(--db-base-body-icon-font-size-sm);
$label-size-height-xs: var(--db-base-body-icon-font-size-xs);
$label-size-height-2xs: var(--db-base-body-icon-font-size-2xs);

$floating-label-size-calc: calc(
	#{variables.$db-spacing-fixed-3xs} + #{variables.$db-spacing-fixed-2xs} +
		#{$label-size-height-2xs}
);

// font-size label which is 2xs + smallest spacing
$floating-label-padding-block-start: calc(
	var(--db-type-body-font-size-2xs) + #{variables.$db-spacing-fixed-3xs}
);

$icon-inline-block-start: calc(
	(#{variables.$db-spacing-fixed-xs} + #{$label-size-height-xs}) *
		var(--db-label-visible-above, 1) + #{variables.$db-sizing-md} / 2
);

$input-types:
	"button", "checkbox", "color", "date", "datetime-local", "email", "file",
	"hidden", "image", "month", "number", "password", "radio", "range", "reset",
	"search", "submit", "tel", "text", "time", "url", "week";

$check-border-size: min(#{variables.$db-border-width-2xs}, 2px);

$db-min-inline-size: var(
	--db-form-component-min-inline-size,
	#{variables.$db-sizing-lg}
);

%dropdown-icon {
	@include icons.set-icon("chevron_down", "after");

	&::after {
		pointer-events: none;

		@media screen and (prefers-reduced-motion: no-preference) {
			transition: $dropdown-icon-transition;
		}
	}
}

%helper-message {
	> db-infotext > .db-infotext,
	> .db-infotext {
		margin-block-start: variables.$db-spacing-fixed-2xs;

		&:is([data-semantic="successful"], [data-semantic="critical"]) {
			display: none;
		}
	}
}

@mixin placeholder-content($selector) {
	#{$selector}::placeholder,
	[id$="-placeholder"] {
		@content;
	}
}

@mixin set-floating-label-overwrites($selector) {
	&[data-variant="floating"] {
		> label {
			@extend %db-overwrite-font-size-md;

			opacity: variables.$db-opacity-xl;
			position: absolute;
			z-index: 2;
			inset-block-start: calc(
				(#{variables.$db-sizing-md} - #{$font-size-height}) / 2
			);
			inset-inline: var(
					--db-form-component-padding-inline-start,
					#{variables.$db-spacing-fixed-sm}
				)
				var(
					--db-form-component-padding-inline-end,
					#{variables.$db-spacing-fixed-sm}
				);
			pointer-events: none;
			font-style: italic;
		}

		[id$="-placeholder"] {
			@extend %db-overwrite-font-size-sm;

			inset-block-start: calc(
				50% - 0.5em + #{variables.$db-spacing-fixed-3xs}
			);
		}

		@include placeholder-content($selector) {
			transition: none;
			opacity: 0;
		}

		#{$selector} {
			@extend %db-overwrite-font-size-sm;

			@if ($selector == textarea) {
				padding-block-start: $floating-label-size-calc;
				/* stylelint-disable-next-line at-rule-empty-line-before */
			} @else {
				/* stylelint-disable-next-line db-ux/use-spacings */
				padding-block-start: var(--db-base-body-icon-font-size-2xs);
			}
		}

		&:has(
				#{$selector}:focus-within,
				#{$selector}:is(input, textarea):not(:placeholder-shown),
				> select option:checked:not([hidden]),
				input[type="checkbox"]:checked,
				input[type="radio"]:checked
			) {
			> label {
				@extend %db-overwrite-font-size-2xs;

				inset-block-start: variables.$db-spacing-fixed-2xs;
				opacity: 1;
				font-style: normal;
			}

			@include placeholder-content($selector) {
				opacity: variables.$db-opacity-xl;
				font-family: var(--db-font-family-sans);
				font-style: italic;

				@if ($selector == select or $selector == summary) {
					/* stylelint-disable-next-line db-ux/use-spacings */
					padding-block-start: var(--db-base-body-icon-font-size-2xs);
				}

				@media screen and (prefers-reduced-motion: no-preference) {
					transition: opacity
						#{variables.$db-transition-straight-emotional};
				}
			}
		}
	}
}

@mixin get-validity-message($key: "valid") {
	> db-infotext > .db-infotext,
	> .db-infotext {
		@if ($key == "valid") {
			&[data-semantic="successful"] {
				display: flex;
			}
			/* stylelint-disable-next-line at-rule-empty-line-before */
		} @else {
			&[data-semantic="critical"] {
				display: flex;
			}
		}

		&:not([data-semantic]) {
			display: none;
		}
	}
}

@mixin get-validity-color($selector, $key: "valid") {
	$variant: "successful";

	@if ($key != "valid") {
		$variant: "critical";
	}

	@if ($selector != textarea) {
		@extend %db-#{$variant}-variables;
		/* stylelint-disable-next-line at-rule-empty-line-before */
	} @else {
		// this is a workaround for the textarea scrollbar
		--db-textarea-read-only: var(--db-#{$variant}-bg-basic-level-1-default);
		--db-adaptive-bg-basic-transparent-full-default: var(
			--db-#{$variant}-bg-basic-transparent-full-default
		);
		--db-adaptive-bg-basic-transparent-semi-default: var(
			--db-#{$variant}-bg-basic-transparent-semi-default
		);
		--db-adaptive-bg-basic-transparent-hovered: var(
			--db-#{$variant}-bg-basic-transparent-hovered
		);
		--db-adaptive-bg-basic-transparent-pressed: var(
			--db-#{$variant}-bg-basic-transparent-pressed
		);
		--db-adaptive-on-bg-basic-emphasis-100-default: var(
			--db-#{$variant}-on-bg-basic-emphasis-100-default
		);
		--db-adaptive-on-bg-basic-emphasis-60-default: var(
			--db-#{$variant}-on-bg-basic-emphasis-60-default
		);
	}

	#{$selector},
	[id$="-placeholder"] {
		color: var(--db-#{$variant}-on-bg-basic-emphasis-100-default);
		caret-color: var(--db-#{$variant}-on-bg-basic-emphasis-100-default);
	}

	@include get-validity-message($key);
}

// This doesn't contain text, search and password, because they don't have an auto-validation
$input-valid-types:
	"color", "date", "datetime-local", "email", "file", "hidden", "month",
	"number", "range", "tel", "time", "url", "week";

@function get-validations($selector, $key) {
	$validations: ":required";

	@if ($selector == input) {
		// https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#using_built-in_form_validation
		$validations: ":required, [minlength], [maxlength], [pattern]";

		@each $type in $input-valid-types {
			$validations: $validations + ", [type=#{$type}]";
		}
		/* stylelint-disable-next-line at-rule-empty-line-before */
	} @else if($selector == textarea) {
		$validations: ":required, [minlength], [maxlength]";
	}

	$has-selectors: "&:has(#{$selector}:not([data-custom-validity]):is(#{$validations}):user-#{$key}),";

	@return string.unquote(string.slice($has-selectors, 1, -2));
}

@mixin get-validity($selector, $key: "valid") {
	$user: "";

	@if ($selector == check or $selector == switch) {
		$user: "user-";
	}

	@if ($selector == check or $selector == radio or $selector == switch) {
		$selector: input;

		&:has(
				#{$selector}:not(
						[data-custom-validity]
					):required:#{$user}#{$key}
			) {
			@content;
		}
		/* stylelint-disable-next-line at-rule-empty-line-before */
	} @else {
		@if ($selector == summary) {
			$selector: select;
		}

		#{get-validations($selector,$key)} {
			@content;
		}
	}

	// If data-custom-validity is set we overwrite the selectors above
	&:has(#{$selector}[data-custom-validity="#{$key}"]),
	&[data-custom-validity="#{$key}"] {
		@content;
	}
}

@mixin set-required-label($selector) {
	&:has(#{$selector}:required),
	&[data-required="true"] {
		&:is(label),
		> label {
			&::after {
				// We're using 1px instead of a token here on purpose, as this is an edge case
				/* stylelint-disable-next-line db-ux/use-spacings */
				padding-inline-start: 1px;

				@include icons.icon-content("*");
			}
		}
	}
}

@mixin set-default-form-component($selector) {
	@extend %db-overwrite-font-size-sm;
	@extend %helper-message;

	// base inline size for inputs without icons
	min-inline-size: $db-min-inline-size;

	/* stylelint-disable-next-line scss/selector-no-redundant-nesting-selector */
	& {
		--db-form-has-before: 0;
		// we use absolute icons
		position: relative;
		display: flex;
		flex-direction: column;
	}

	&[data-variant="floating"],
	&[data-hide-label="true"] {
		--db-label-visible-above: 0;
	}

	@include set-floating-label-overwrites($selector);
	@include set-required-label($selector);

	@include get-validity($selector) {
		&:has(
				> .db-infotext[data-semantic="successful"],
				> db-infotext > .db-infotext[data-semantic="successful"]
			) {
			@include get-validity-color($selector, "valid");
		}
	}

	@include get-validity($selector, "invalid") {
		@include get-validity-color($selector, "invalid");
	}

	@include placeholder-content($selector) {
		opacity: variables.$db-opacity-xl;
		font-family: var(--db-font-family-sans);
		font-style: italic;
	}

	#{$selector} {
		@extend %db-overwrite-font-size-md;
		@extend %default-interactive-component;
		@extend %form-component-border;

		background-color: colors.$db-adaptive-bg-basic-transparent-semi-default;
		caret-color: colors.$db-adaptive-on-bg-basic-emphasis-100-default;
		appearance: none;
		max-inline-size: 100%;
		inline-size: 100%;
		min-inline-size: $db-min-inline-size;

		/* stylelint-disable-next-line db-ux/use-spacings */
		padding-inline: var(
				--db-form-component-padding-inline-start,
				#{variables.$db-spacing-fixed-sm}
			)
			var(
				--db-form-component-padding-inline-end,
				#{variables.$db-spacing-fixed-sm}
			);

		@include helpers.hover {
			background-color: colors.$db-adaptive-bg-basic-transparent-hovered;
		}

		&:is(input, textarea) {
			/* see https://developer.mozilla.org/en-US/docs/Web/CSS/field-sizing */
			&[data-field-sizing="content"] {
				field-sizing: content;
			}

			&[data-field-sizing="fixed"] {
				field-sizing: fixed;
			}
		}

		&:is(input, textarea):not(:disabled):read-only {
			background-color: var(
				--db-textarea-read-only,
				#{colors.$db-adaptive-bg-basic-level-1-default}
			) !important;
		}
	}

	// label
	> label {
		@extend %db-overwrite-font-size-xs;

		padding-block-end: variables.$db-spacing-fixed-xs;
		max-inline-size: 25ch;
		text-overflow: ellipsis;
		white-space: nowrap;
		overflow: hidden;

		@media screen and (prefers-reduced-motion: no-preference) {
			transition: font-size variables.$db-transition-straight-emotional;
		}
	}

	&[data-hide-label="true"] {
		> label {
			@extend %a11y-visually-hidden;

			padding: 0;
		}
	}

	// disabled
	&:has(
			#{$selector}:disabled,
			#{$selector}[data-disabled="true"],
			#{$selector}[aria-disabled="true"]
		) {
		// Decided against cursor: not-allowed, compare to e.g. https://phabricator.wikimedia.org/T121960
		opacity: variables.$db-opacity-md;
		pointer-events: none;
	}

	// icons
	&::after,
	&::before {
		position: absolute;
		pointer-events: none;
		inset-block-start: $icon-inline-block-start;
		color: colors.$db-adaptive-on-bg-basic-emphasis-100-default;
		transform: translateY(-50%);
		z-index: 1;
	}

	&::before {
		margin-inline-end: variables.$db-spacing-fixed-sm;
		inset-inline-start: variables.$db-spacing-fixed-sm;
	}

	&::after {
		margin-inline-start: variables.$db-spacing-fixed-sm;
		inset-inline-end: variables.$db-spacing-fixed-sm;
	}

	@if ($selector == input or $selector == select or $selector == summary) {
		#{$selector} {
			block-size: variables.$db-sizing-md;
			text-overflow: ellipsis;
		}
	}
}

@mixin get-validity-color-check-label-color($state, $key: "valid") {
	$variant: successful;

	@if ($key != "valid") {
		$variant: critical;
	}

	&:has(input:not([role="switch"])) {
		&:is(label),
		> label {
			color: var(--db-#{$variant}-on-bg-basic-emphasis-100-#{$state});
		}
	}
}

// CHECKBOX & RADIO

@mixin get-state($state: "hover") {
	$variant: "hovered";

	@if ($state != "hover") {
		$variant: "pressed";
	}

	&:has(input:#{$state}, > label:#{$state}, :is(label):#{$state}) {
		--db-check-element-label-color: var(
			--db-adaptive-on-bg-basic-emphasis-100-#{$variant}
		);

		&:is(label),
		> label {
			cursor: helpers.$cursor-pointer;
		}

		input {
			cursor: helpers.$cursor-pointer;
			background-color: var(
				--db-adaptive-bg-basic-transparent-#{$variant}
			);
			@content;
		}
	}
}

@mixin set-default-check-element() {
	@extend %db-overwrite-font-size-md;

	@include set-required-label(input);

	&:has(input:disabled) {
		opacity: variables.$db-opacity-md;
	}

	&:is(label),
	> label {
		display: flex;
		align-items: flex-start;
		position: relative;
		gap: variables.$db-spacing-fixed-xs;
		color: var(
			--db-check-element-label-color,
			#{colors.$db-adaptive-on-bg-basic-emphasis-100-default}
		);
	}

	input {
		background-color: colors.$db-adaptive-bg-basic-transparent-full-default;
		place-content: center center;
		appearance: none;
		aspect-ratio: 1;
		/* stylelint-disable-next-line db-ux/use-border-width */
		border: #{$check-border-size} solid
			var(
				--db-check-element-border-color,
				#{colors.$db-adaptive-on-bg-basic-emphasis-100-default}
			);
		block-size: $font-size-height;
		inline-size: $font-size-height;
		padding: 0;
	}

	&[data-size="small"] {
		@extend %db-overwrite-font-size-sm;

		input {
			margin-inline-end: variables.$db-spacing-fixed-2xs;
		}
	}

	&[data-hide-label="true"] {
		font-size: 0;

		input {
			margin-inline-end: 0;
		}
	}
}
