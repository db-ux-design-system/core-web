@use "sass:map";
@use "component";
@use "@db-ux/core-foundations/build/styles/variables";
@use "@db-ux/core-foundations/build/styles/colors";
@use "@db-ux/core-foundations/build/styles/helpers";

$interactive-selectors: "label, button:not(.db-tab-remove-button), a";

@mixin get-weak($name: "adaptive", $border-color: 60, $background-color: 1) {
	--db-tag-border-color: var(
		--db-#{$name}-on-bg-basic-emphasis-#{$border-color}-default
	);
	// stylelint-disable-next-line db-ux/use-border-color
	border-color: var(--db-tag-border-color);

	@include colors.set-current-colors(
		var(--db-#{$name}-bg-basic-level-#{$background-color}-default),
		var(--db-#{$name}-on-bg-basic-emphasis-80-default)
	);
}

@mixin get-strong($name: "adaptive") {
	--db-tag-border-color: var(--db-#{$name}-on-bg-basic-emphasis-70-default);
	// stylelint-disable-next-line db-ux/use-border-color
	border-color: var(--db-tag-border-color);

	@include colors.set-current-colors(
		var(--db-#{$name}-bg-vibrant-default),
		var(--db-#{$name}-on-bg-vibrant-default)
	);
}

%set-interactive-weak {
	@include get-weak();

	@include helpers.hover {
		background-color: colors.$db-adaptive-bg-basic-level-1-hovered;
	}

	@include helpers.active {
		background-color: colors.$db-adaptive-bg-basic-level-1-pressed;
	}
}

@mixin get-tag-colors($htmlTag: "tag") {
	$border-color: 60;
	$background-color: 1;

	&:not([data-semantic]),
	&[data-semantic="adaptive"] {
		&:not([data-emphasis]),
		&[data-emphasis="weak"] {
			@if ($htmlTag == "badge") {
				$border-color: 70;
				$background-color: 3;

				@include get-weak("adaptive", $border-color, $background-color);
				/* stylelint-disable-next-line at-rule-empty-line-before */
			} @else {
				@include get-weak();
			}
		}

		&[data-emphasis="strong"] {
			@include get-strong();

			.db-tab-remove-button {
				@extend %set-interactive-strong;
			}
		}
	}

	@each $name in colors.$variant-colors {
		&[data-semantic="#{$name}"] {
			&:not([data-emphasis]),
			&[data-emphasis="weak"] {
				@include get-weak($name, $border-color, $background-color);
			}

			&[data-emphasis="strong"] {
				@include get-strong($name);
			}
		}
	}
}

// get button and link tags
@mixin get-interactive-selectors() {
	&:not(:has(dbbutton)) button:not(.db-tab-remove-button),
	dbbutton:not(.db-tab-remove-button) > button,
	db-button > button,
	a {
		@content;
	}
}

%set-interactive-strong {
	@include get-strong();

	@include helpers.hover {
		background-color: colors.$db-adaptive-bg-vibrant-hovered;
	}

	@include helpers.active {
		background-color: colors.$db-adaptive-bg-vibrant-pressed;
	}
}

@mixin revert-db-components() {
	input:checked {
		background-color: transparent;

		@include helpers.hover {
			background-color: transparent;
		}

		@include helpers.active {
			background-color: transparent;
		}
	}
}

@mixin get-tag-colors-interactive() {
	@include revert-db-components;

	// overwrite current variables for semantic color
	@each $name in colors.$variant-colors {
		&[data-semantic="#{$name}"] {
			@extend %db-#{$name}-variables;
		}
	}

	&:not([data-emphasis]),
	&[data-emphasis="weak"] {
		// buttons and links
		@include get-interactive-selectors() {
			@extend %set-interactive-weak;
		}

		label:has(input) {
			@extend %set-interactive-weak;
		}

		label:has(input[type="checkbox"]:checked) {
			@extend %set-interactive-strong;
		}

		// radio (checked) without hover/pressed
		label:has(input[type="radio"]:checked) {
			&,
			&:is(:hover, :focus, :active) {
				@include get-strong();
			}
		}
	}

	&[data-emphasis="strong"] {
		@extend %set-interactive-strong;

		// buttons and links
		@include get-interactive-selectors() {
			@extend %set-interactive-strong;
		}

		label:has(input[type="checkbox"]:checked) {
			@extend %set-interactive-strong;
		}

		label:has(input[type="radio"]:checked) {
			@include get-strong();
		}

		&:has(input):not(:has(input:checked)) {
			@extend %set-interactive-weak;
		}
	}
}
