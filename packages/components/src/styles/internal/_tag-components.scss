@use "sass:map";
@use "component";
@use "@db-ux/core-foundations/build/styles/variables";
@use "@db-ux/core-foundations/build/styles/colors";
@use "@db-ux/core-foundations/build/styles/helpers";

$interactive-selectors: "label, button:not(.db-tab-remove-button), a";

%set-adaptive-weak-tag {
	border-color: colors.$db-adaptive-on-bg-basic-emphasis-60-default;

	@include colors.set-current-colors(
		colors.$db-adaptive-bg-basic-level-1-default,
		colors.$db-adaptive-on-bg-basic-emphasis-80-default
	);
}

%set-adaptive-weak-badge {
	border-color: colors.$db-adaptive-on-bg-basic-emphasis-70-default;

	@include colors.set-current-colors(
		colors.$db-adaptive-bg-basic-level-3-default,
		colors.$db-adaptive-on-bg-basic-emphasis-80-default
	);
}

%set-adaptive-strong-tag {
	border-color: colors.$db-adaptive-on-bg-basic-emphasis-70-default;

	@include colors.set-current-colors(
		colors.$db-adaptive-bg-vibrant-default,
		colors.$db-adaptive-on-bg-vibrant-default
	);
}

%set-adaptive-origin-tag {
	border-color: colors.$db-adaptive-on-bg-basic-emphasis-70-default;

	@include colors.set-current-colors(
		colors.$db-adaptive-origin-default,
		colors.$db-adaptive-on-origin-default
	);
}

%set-interactive-weak {
	@extend %set-adaptive-weak-tag;

	@include helpers.hover {
		background-color: colors.$db-adaptive-bg-basic-level-1-hovered;
	}

	@include helpers.active {
		background-color: colors.$db-adaptive-bg-basic-level-1-pressed;
	}
}

%set-interactive-strong {
	@extend %set-adaptive-strong-tag;

	@include helpers.hover {
		background-color: colors.$db-adaptive-bg-inverted-contrast-high-hovered;
	}

	@include helpers.active {
		background-color: colors.$db-adaptive-bg-inverted-contrast-high-pressed;
	}
}

%set-interactive-origin {
	@extend %set-adaptive-origin-tag;

	@include helpers.hover {
		background-color: colors.$db-adaptive-origin-hovered;
	}

	@include helpers.active {
		background-color: colors.$db-adaptive-origin-pressed;
	}
}

@mixin get-tag-colors($htmlTag: "tag") {
	@if ($htmlTag == "badge") {
		@extend %set-adaptive-weak-badge;
		// stylelint-disable-next-line at-rule-empty-line-before
	} @else {
		@extend %set-adaptive-weak-tag;
	}

	&[data-emphasis="strong"] {
		@extend %set-adaptive-strong-tag;
	}

	@each $name in colors.$variant-colors {
		&[data-semantic="#{$name}"] {
			border-color: var(--db-#{$name}-on-bg-basic-emphasis-60-default);

			@include colors.set-current-colors(
				var(--db-#{$name}-bg-basic-level-1-default),
				var(--db-#{$name}-on-bg-basic-emphasis-80-default)
			);

			&[data-emphasis="strong"] {
				border-color: var(
					--db-#{$name}-on-bg-basic-emphasis-70-default
				);

				@include colors.set-current-colors(
					var(--db-#{$name}-bg-vibrant-default),
					var(--db-#{$name}-on-bg-vibrant-default)
				);
			}
		}
	}
}

// get button and link tags
@mixin get-interactive-selectors() {
	&:not(:has(dbbutton)) button:not(.db-tab-remove-button),
	dbbutton:not(.db-tab-remove-button) > button,
	db-button > button,
	a {
		@content;
	}
}

%set-interactive-strong {
	@extend %set-adaptive-strong-tag;

	@include helpers.hover {
		background-color: colors.$db-adaptive-bg-inverted-contrast-high-hovered;
		// TODO: will be changed in the future tag refactoring
		/* stylelint-disable-next-line db-ux/use-border-color */
		border-color: colors.$db-adaptive-bg-inverted-contrast-high-hovered;
	}

	@include helpers.active {
		background-color: colors.$db-adaptive-bg-inverted-contrast-high-pressed;
		// TODO: will be changed in the future tag refactoring
		/* stylelint-disable-next-line db-ux/use-border-color */
		border-color: colors.$db-adaptive-bg-inverted-contrast-high-pressed;
	}
}

@mixin revert-db-components() {
	input:checked {
		background-color: transparent;

		@include helpers.hover {
			background-color: transparent;
		}

		@include helpers.active {
			background-color: transparent;
		}
	}
}

@mixin get-tag-colors-interactive() {
	@include revert-db-components;

	// overwrite current variables for semantic color
	@each $name in colors.$variant-colors {
		&[data-semantic="#{$name}"] {
			@extend %db-#{$name}-variables;
		}
	}

	&:not([data-emphasis]),
	&[data-emphasis="weak"] {
		// buttons and links
		@include get-interactive-selectors() {
			@extend %set-interactive-weak;
		}

		label:has(input) {
			@extend %set-interactive-weak;
		}

		label:has(input[type="checkbox"]:checked) {
			@extend %set-interactive-strong;
		}

		// radio (checked) without hover/pressed
		label:has(input[type="radio"]:checked) {
			&,
			&:is(:hover, :focus, :active) {
				@extend %set-adaptive-strong-tag;
			}
		}
	}

	&[data-emphasis="strong"] {
		@extend %set-interactive-strong;

		// buttons and links
		@include get-interactive-selectors() {
			@extend %set-interactive-strong;
		}

		label:has(input[type="checkbox"]:checked) {
			@extend %set-interactive-strong;
		}

		label:has(input[type="radio"]:checked) {
			@extend %set-adaptive-strong-tag;
		}

		&:has(input):not(:has(input:checked)) {
			@extend %set-interactive-weak;
		}
	}
}
