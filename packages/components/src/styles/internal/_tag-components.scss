@use "sass:map";
@use "component";
@use "@db-ux/core-foundations/build/styles/variables";
@use "@db-ux/core-foundations/build/styles/helpers";
@use "@db-ux/core-foundations/build/styles/materials/classes/all";

$interactive-selectors: "label, button:not(.db-tab-remove-button), a";

@mixin get-weak() {
	@extend [data-material="filled"];
}

@mixin get-strong() {
	@extend [data-material="vibrant"];
}


// get button and link tags
@mixin get-interactive-selectors() {
	&:not(:has(dbbutton)) button:not(.db-tab-remove-button),
	dbbutton:not(.db-tab-remove-button) > button,
	db-button > button,
	a {
		@content;
	}
}

@mixin revert-db-components() {
	input:checked {
		background-color: transparent;

		@include helpers.hover {
			background-color: transparent;
		}

		@include helpers.active {
			background-color: transparent;
		}
	}
}

@mixin get-tag-colors-interactive() {
	@include revert-db-components;

	// overwrite current variables for semantic color

	&:not([data-emphasis="strong"]) {
		// buttons and links
		@include get-interactive-selectors {
			/*@extend %set-interactive-weak;*/
		}

		label:has(input) {
			/*@extend %set-interactive-weak;*/
		}

		label:has(input[type="checkbox"]:checked) {
			/*@extend %set-interactive-strong;*/
		}

		// radio (checked) without hover/pressed
		label:has(input[type="radio"]:checked) {
			&,
			&:is(:hover, :focus, :active) {
				@include get-strong;
			}
		}
	}

	&[data-emphasis="strong"] {
		/*@extend %set-interactive-strong;*/

		// buttons and links
		@include get-interactive-selectors {
			/*@extend %set-interactive-strong;*/
		}

		label:has(input[type="checkbox"]:checked) {
			/*@extend %set-interactive-strong;*/
		}

		label:has(input[type="radio"]:checked) {
			@include get-strong;
		}

		&:has(input):not(:has(input:checked)) {
			/*@extend %set-interactive-weak;*/
		}
	}
}
