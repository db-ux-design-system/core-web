/**
 * Generate Color Utilities (Classes and SCSS Placeholders) for color dependencies
 * according to definitions made by DB UI v3
 */

const prefix = 'db';

/**
 * Backgrounds have more than one variant with the same color for text (on-color)
 * e.g. neutral with variants 1-6 or transparent-full and transparent-semi
 */

const generateBGVariants = (value, variant) => {
	// TODO: This will be replaced with 0===bg-neutral and 0=bg-neutral-strong
	const nameEnding = variant === '4' ? `-strong` : '';
	return `
.${prefix}-bg-${value}${nameEnding} {
    @extend %${prefix}-bg-${value}${nameEnding};

    &-transparent-full {
        @extend %${prefix}-bg-${value}${nameEnding}-transparent-full;
    }

    &-transparent-semi {
        @extend %${prefix}-bg-${value}${nameEnding}-transparent-semi;
    }

    &-ia,
    &[data-variant="interactive"] {
        @extend %${prefix}-bg-${value}${nameEnding}-ia;
    }

    .db-weak {
        @extend %weak;
    }
}
`;
};

/**
 * Generates color utility classes and scss placeholders for non-interactive and interactive variants
 * of color combination (background-color and color) based on definitions made by DB UI v3
 *
 * @param {*} colorToken scss transform obj generated by styleDictionary
 * @returns scss string
 */
exports.generateColorUtilitityClasses = (colorToken) => {
	let output = `
	@use "color-placeholder";
	`;

	for (const [, value] of Object.keys(colorToken).entries()) {
		// TODO: remove this if secondary becomes obsolete
		if (value !== 'secondary') {
			if (value === 'neutral') {
				// Neutral has multiple default tones
				const neutralTones = ['0', '4'];
				for (const neutralTone of neutralTones) {
					output += generateBGVariants(value, neutralTone);
				}
			} else {
				// Default text and background colors (former 'light' tone)
				output += generateBGVariants(value);
			}
		}
	}

	return output;
};
