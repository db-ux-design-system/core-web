/**
 * Generate Color Utilities (Classes and SCSS Placeholders) for color dependencies
 * according to definitions made by DB UI v3
 */

const prefix = 'db';
const fileHeader = `
@use "sass:color";
@use "variables" as *;
// Do not edit directly
// Generated on
// ${new Date().toString()}
`;

/**
 * Backgrounds have more than one variant with the same color for text (on-color)
 * e.g. neutral with variants 1-6 or transparent-full or transparent-semi
 */

const generateBGVariants = (
	value,
	variant,
	currentColorObject,
	baseColorObject,
	baseColor
) => {
	const placeholderName = `${prefix}-bg-${value}${
		variant ? `-${variant}` : ''
	}`;
	try {
		const bgColor = `${prefix}-${currentColorObject.enabled.name}`;
		const fgColor = `${prefix}-${baseColorObject.enabled.name}`;
		let weakFgColor;
		if (baseColorObject.weak) {
			weakFgColor = `${prefix}-${baseColorObject.weak.enabled.name}`;
		}

		let elementColor;
		if (baseColor.element) {
			elementColor = `${prefix}-${baseColor.element.enabled.name}`;
		}

		let borderColor;
		let borderColorWeak;
		if (baseColor.border) {
			borderColor = `${prefix}-${baseColor.border.enabled.name}`;
			if (baseColor.border.weak) {
				borderColorWeak = `${prefix}-${baseColor.border.weak.enabled.name}`;
			}
		}

		let result = `
%${placeholderName}-variables {
	--db-current-base-color: var(--${value}-base-color,
	#{$${prefix}-${baseColor.enabled.name}});
	--db-current-color: var(--${value}-on-bg-color, #{$${fgColor}});
	--db-current-bg-color: color-mix(
		in srgb,
		transparent	var(--db-bg-transparent, 0%),
		var(--${value}-bg-color, #{$${bgColor}})
	);
    ${
		elementColor
			? `--db-current-element-color: var(--${value}-element-color, #{$${elementColor}});`
			: ''
	}
    ${
		borderColor
			? `--db-current-border-color: var(--${value}-border-color, #{$${borderColor}});`
			: ''
	}
    ${
		borderColorWeak
			? `--db-current-border-weak-color: var(--${value}-border-weak-color, #{$${borderColorWeak}});`
			: ''
	}
}

%${placeholderName} {
	@extend %${placeholderName}-variables;
	background-color: var(--db-current-bg-color);
    color: var(--db-current-color);

    ${
		currentColorObject === baseColor
			? `--db-current-base-color-alpha: 100%;`
			: ''
	}

	&-transparent {
		&-semi{
			--db-bg-transparent: 92%;
		}

		&-full, &-semi{
    		color: var(--${value}-bg-on-color, #{$${fgColor}});
			@extend %${placeholderName}-variables;
    		background-color: color-mix(
				in srgb,
				transparent	var(--db-bg-transparent, 100%),
				var(--db-current-base-color)
			);
		}
	}

    &-ia, &[data-variant="interactive"] {
		@extend %${placeholderName};
		&:enabled{
			&:hover{
				--db-bg-transparent: 84%;
			}
			&:active{
				--db-bg-transparent: 68%;
			}
		}
    }
`;
		if (weakFgColor) {
			result += `
    %weak {
		--db-current-color: var(--${value}-on-bg-weak-color, #{$${weakFgColor}});
		color: var(--db-current-color);
    }
`;
		}

		result += `}
	`;
		return result;
	} catch (error) {
		console.error(`Error for ${placeholderName}`);
		console.error(error);
		return '';
	}
};

/**
 * Generates color utility classes and scss placeholders for non-interactive and interactive variants
 * of color combination (background-color and color) based on definitions made by DB UI v3
 *
 * @param {*} colorToken scss transform obj generated by styleDictionary
 * @returns scss string
 */
exports.generateColorUtilitityPlaceholder = (colorToken) => {
	let output = fileHeader;

	for (const [, value] of Object.keys(colorToken).entries()) {
		// Text colors with interactive variant, e.g. primary
		if (colorToken[value].enabled) {
			// Text & elements & border
			output += `
%${prefix}-${value}-component-ia {
	color: var(--${value}-base-on-color, #{$${prefix}-${colorToken[value].on.enabled.name}});
	background-color: var(--${value}-base-color, #{$${prefix}-${colorToken[value].enabled.name}});
	&:enabled {
		&:hover{
			background-color: var(--${value}-base-hover-color, #{$${prefix}-${colorToken[value].hover.name}});
		}
		&:active{
			background-color: var(--${value}-base-pressed-color, #{$${prefix}-${colorToken[value].pressed.name}});
		}
	}
}

%${prefix}-${value}-component {
	background-color: var(--${value}-base-color, #{$${prefix}-${colorToken[value].enabled.name}});
	color: var(--${value}-base-on-color, #{$${prefix}-${colorToken[value].on.enabled.name}});
}
`;
		}

		if (value === 'neutral') {
			// Neutral has multiple default tones
			const neutralTones = ['0', '1', '2', '3', '4'];
			for (const neutralTone of neutralTones) {
				output += generateBGVariants(
					value,
					neutralTone,
					colorToken[value].bg[neutralTone],
					colorToken[value].on.bg,
					colorToken[value]
				);
			}
		} else {
			// Default text and background colors (former 'light' tone)
			output += generateBGVariants(
				value,
				undefined,
				colorToken[value].bg,
				colorToken[value].on.bg,
				colorToken[value]
			);
		}
	}

	return output;
};
