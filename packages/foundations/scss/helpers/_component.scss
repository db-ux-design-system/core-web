@use "../variables" as *;
@use "../color-placeholder" as *;
@use "../helpers/functions" as *;
@use "../icon/icons.helpers" as *;

/* TODO: We should get the variables from UX, and probably want to make those global variables */
$default-border-radius: 4px;
$default-card-border-radius: var(--default-card-border-radius, 8px);
$default-opacity: 0.25;

%default-adaptive-border {
	border: solid 1px var(--db-current-color, $db-colors-neutral-on-bg-enabled);
}

%transparent-border {
	border: solid 1px transparent;
}

%component-border {
	border: solid 1px
		var(--db-current-border-color, $db-colors-neutral-border-enabled);
}

%default-border-radius {
	// TODO: Get a general token from Zeplin
	border-radius: to-rem(4);
}

%default-color {
	color: var(--db-current-color, $db-colors-neutral-on-bg-enabled);
}

%default-interactive-component {
	@extend %default-adaptive-border;
	@extend %default-color;
	@extend %default-border-radius;
}

%default-background-transition {
	// TODO Changing background-color on hover should be animated by a transition
	transition: background-color
		var(--db-transition-color, #{$db-transition-color});
}

%default-card {
	border-radius: $default-card-border-radius;
	box-shadow: $db-elevation-4;
}

%adaptive-critical-component {
	@extend %db-bg-critical-transparent-semi;
	@extend %db-bg-critical-transparent-semi-hover-state;
}

%adaptive-warning-component {
	@extend %db-bg-warning-transparent-semi;
	@extend %db-bg-warning-transparent-semi-hover-state;
}

%adaptive-informational-component {
	@extend %db-bg-informational-transparent-semi;
	@extend %db-bg-informational-transparent-semi-hover-state;
}

%adaptive-successful-component {
	@extend %db-bg-successful-transparent-semi;
	@extend %db-bg-successful-transparent-semi-hover-state;
}
