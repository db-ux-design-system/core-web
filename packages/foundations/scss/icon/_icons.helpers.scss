@use "../helpers/functions" as *;
@use "../variables.global" as *;
@use "icons.variables" as *;
@use "icons.placeholder" as *;

// Icon SCSS mixin
@mixin icon(
	$glyph: "",
	$size: $icon-size,
	$style: $icon-style,
	$position: "before"
) {
	&::#{$position} {
		@if $position == "before" {
			margin-inline-end: var(
				--icon-margin-after,
				#{$db-spacing-fixed-xs}
			);
		}
		@if $position == "after" {
			margin-inline-start: var(
				--icon-margin-before,
				#{$db-spacing-fixed-xs}
			);
		}

		@if $glyph != "" {
			--icon-glyph: "#{$glyph}";
		}

		@extend %icon;
	}
}

// SCSS mixin for elements that text should get hidden in favour of only displaying the included icon
@mixin is-icon-text-replace($position: "before") {
	font-size: 0 !important;

	@if $position == "before" {
		&::before {
			--icon-margin-after: 0;
		}
	} @else {
		&::after {
			--icon-margin-before: 0;
		}
	}
}

// Icon glyph mixin
@function glyph($glyph) {
	@return map-get($icon-glyphs, $glyph);
}

// Icon meta data mixin
@mixin icon-meta(
	$size: $icon-size,
	$style: $icon-style,
	$position: "before",
	$font-size: $icon-size
) {
	&::#{$position} {
		--icon-font-family: "#{"icons-" + $size + "-" + $style}",
			"missing-icons";
		--icon-font-size: #{to-rem($pxValue: $font-size)};
	}
}
